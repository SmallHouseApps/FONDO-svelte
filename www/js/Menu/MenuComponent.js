/* MenuComponent.html generated by Svelte v1.60.2 */
var MenuComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1kcc5zl-style';
		style.textContent = ".svelte-1kcc5zl#MenuComponent,.svelte-1kcc5zl #MenuComponent{height:100%;position:absolute;width:600px}.svelte-1kcc5zl.sidenav,.svelte-1kcc5zl .sidenav{height:100vh;position:absolute;z-index:9999;transition:transform 200ms !important}.svelte-1kcc5zl.circle,.svelte-1kcc5zl .circle{display:flex !important;align-items:center !important;justify-content:center !important}.svelte-1kcc5zl.user-view,.svelte-1kcc5zl .user-view{line-height:0px;height:220px}.svelte-1kcc5zl.divider,.svelte-1kcc5zl .divider{background-color:rgba(255, 255, 255, 0.3)}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, ul, li, text, div_1, div_2, text_1, div_3, a, text_4, a_1, span, text_5_value = state.workShift.user.full_name, text_5, text_7, a_2, span_1, text_8_value = state.workShift.user.email, text_8, li_1, li_2;

		var if_block = (state.workShift.open) && create_if_block(component, state);

		return {
			c: function create() {
				div = createElement("div");
				ul = createElement("ul");
				li = createElement("li");
				if (if_block) if_block.c();
				text = createText("\r\n        ");
				div_1 = createElement("div");
				div_2 = createElement("div");
				text_1 = createText("\r\n            ");
				div_3 = createElement("div");
				a = createElement("a");
				a.innerHTML = "<div class=\"circle white z-depth-1\"><i class=\"mdi mdi-account grey-text\" style=\"font-size: 50px;\"></i></div>";
				text_4 = createText("\r\n                ");
				a_1 = createElement("a");
				span = createElement("span");
				text_5 = createText(text_5_value);
				text_7 = createText("\r\n                ");
				a_2 = createElement("a");
				span_1 = createElement("span");
				text_8 = createText(text_8_value);
				li_1 = createElement("li");
				li_1.innerHTML = "<a class=\"waves-effect\" href=\"#applic/list/destroy\" style=\"font-size: 18px\"><i class=\"mdi mdi-view-list\"></i>Список заявок</a>";
				li_2 = createElement("li");
				li_2.innerHTML = "<a class=\"waves-effect\" href=\"#map/destroy\" style=\"font-size: 18px\"><i class=\"mdi mdi-map\"></i>Карта</a>";
				this.h();
			},

			h: function hydrate() {
				div_2.className = "background blue";
				a.href = "#user";
				span.className = "white-text name";
				a_1.href = "#name";
				span_1.className = "white-text email";
				a_2.href = "#email";
				div_1.className = "user-view";
				setStyle(div_1, "display", "flex");
				setStyle(div_1, "align-items", "center");
				setStyle(li, "position", "relative");
				ul.className = "sidenav";
				div.id = "MenuComponent";
				div.className = "svelte-1kcc5zl";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(ul, div);
				appendNode(li, ul);
				if (if_block) if_block.m(li, null);
				appendNode(text, li);
				appendNode(div_1, li);
				appendNode(div_2, div_1);
				appendNode(text_1, div_1);
				appendNode(div_3, div_1);
				appendNode(a, div_3);
				appendNode(text_4, div_3);
				appendNode(a_1, div_3);
				appendNode(span, a_1);
				appendNode(text_5, span);
				appendNode(text_7, div_3);
				appendNode(a_2, div_3);
				appendNode(span_1, a_2);
				appendNode(text_8, span_1);
				appendNode(li_1, ul);
				appendNode(li_2, ul);
			},

			p: function update(changed, state) {
				if (state.workShift.open) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block(component, state);
						if_block.c();
						if_block.m(li, text);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if ((changed.workShift) && text_5_value !== (text_5_value = state.workShift.user.full_name)) {
					text_5.data = text_5_value;
				}

				if ((changed.workShift) && text_8_value !== (text_8_value = state.workShift.user.email)) {
					text_8.data = text_8_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
			}
		};
	}

	// (9:20) {{#if workShift.speedometr_start}}
	function create_if_block_1(component, state) {
		var div, label, text_1, span, text_2_value = state.workShift.speedometr_start, text_2;

		return {
			c: function create() {
				div = createElement("div");
				label = createElement("label");
				label.textContent = "спидометр";
				text_1 = createText("\r\n                        ");
				span = createElement("span");
				text_2 = createText(text_2_value);
				this.h();
			},

			h: function hydrate() {
				label.className = "white-text";
				div.className = "info-block col s6";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(label, div);
				appendNode(text_1, div);
				appendNode(span, div);
				appendNode(text_2, span);
			},

			p: function update(changed, state) {
				if ((changed.workShift) && text_2_value !== (text_2_value = state.workShift.speedometr_start)) {
					text_2.data = text_2_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (16:20) {{#if workShift.time_start}}
	function create_if_block_2(component, state) {
		var div, label, text_1, span, text_2_value = state.workShift.time_start, text_2;

		return {
			c: function create() {
				div = createElement("div");
				label = createElement("label");
				label.textContent = "время";
				text_1 = createText("\r\n                        ");
				span = createElement("span");
				text_2 = createText(text_2_value);
				this.h();
			},

			h: function hydrate() {
				label.className = "white-text";
				div.className = "info-block col s6";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(label, div);
				appendNode(text_1, div);
				appendNode(span, div);
				appendNode(text_2, span);
			},

			p: function update(changed, state) {
				if ((changed.workShift) && text_2_value !== (text_2_value = state.workShift.time_start)) {
					text_2.data = text_2_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (24:16) {{#if workTime}}
	function create_if_block_3(component, state) {
		var div, span, text_1, div_1, span_1, text_2;

		return {
			c: function create() {
				div = createElement("div");
				span = createElement("span");
				span.textContent = "Время работы";
				text_1 = createText("\r\n                    ");
				div_1 = createElement("div");
				span_1 = createElement("span");
				text_2 = createText(state.workTime);
				this.h();
			},

			h: function hydrate() {
				div_1.className = "info-block col s12";
				div.className = "row";
				setStyle(div, "line-height", "18px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(span, div);
				appendNode(text_1, div);
				appendNode(div_1, div);
				appendNode(span_1, div_1);
				appendNode(text_2, span_1);
			},

			p: function update(changed, state) {
				if (changed.workTime) {
					text_2.data = state.workTime;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (34:16) {{#if workShift.speedometr_end && workShift.time_end}}
	function create_if_block_4(component, state) {
		var div, span, text_2, div_1, label, text_4, span_1, text_5_value = state.workShift.speedometr_end, text_5, text_7, div_2, label_1, text_9, span_2, text_10_value = state.workShift.time_end, text_10, text_13, div_3, text_14, div_4, div_5, label_2, text_16, span_3, text_17_value = state.workShift.speedometr_end - state.workShift.speedometr_start, text_17, text_18, text_20, div_6, label_3, text_22, span_4, text_23_value = state.workShift.time_end.split(':')[0] - state.workShift.time_start.split(':')[0], text_23, text_24, text_25_value = state.workShift.time_end.split(':')[1] - state.workShift.time_start.split(':')[1], text_25, text_26;

		return {
			c: function create() {
				div = createElement("div");
				span = createElement("span");
				span.innerHTML = "Конец смены\r\n                        <i class=\"mdi mdi-ray-end\"></i>";
				text_2 = createText("\r\n                    ");
				div_1 = createElement("div");
				label = createElement("label");
				label.textContent = "спидометр";
				text_4 = createText("\r\n                        ");
				span_1 = createElement("span");
				text_5 = createText(text_5_value);
				text_7 = createText("\r\n                    ");
				div_2 = createElement("div");
				label_1 = createElement("label");
				label_1.textContent = "время";
				text_9 = createText("\r\n                        ");
				span_2 = createElement("span");
				text_10 = createText(text_10_value);
				text_13 = createText("\r\n                ");
				div_3 = createElement("div");
				text_14 = createText("\r\n                ");
				div_4 = createElement("div");
				div_5 = createElement("div");
				label_2 = createElement("label");
				label_2.textContent = "пройдено";
				text_16 = createText("\r\n                        ");
				span_3 = createElement("span");
				text_17 = createText(text_17_value);
				text_18 = createText("км");
				text_20 = createText("\r\n                    ");
				div_6 = createElement("div");
				label_3 = createElement("label");
				label_3.textContent = "работал";
				text_22 = createText("\r\n                        ");
				span_4 = createElement("span");
				text_23 = createText(text_23_value);
				text_24 = createText("ч.");
				text_25 = createText(text_25_value);
				text_26 = createText("м.");
				this.h();
			},

			h: function hydrate() {
				label.className = "white-text";
				div_1.className = "info-block col s6";
				label_1.className = "white-text";
				div_2.className = "info-block col s6";
				div.className = "row";
				setStyle(div, "line-height", "18px");
				div_3.className = "divider";
				label_2.className = "white-text";
				div_5.className = "info-block col s6";
				label_3.className = "white-text";
				div_6.className = "info-block col s6";
				div_4.className = "row";
				setStyle(div_4, "line-height", "18px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(span, div);
				appendNode(text_2, div);
				appendNode(div_1, div);
				appendNode(label, div_1);
				appendNode(text_4, div_1);
				appendNode(span_1, div_1);
				appendNode(text_5, span_1);
				appendNode(text_7, div);
				appendNode(div_2, div);
				appendNode(label_1, div_2);
				appendNode(text_9, div_2);
				appendNode(span_2, div_2);
				appendNode(text_10, span_2);
				insertNode(text_13, target, anchor);
				insertNode(div_3, target, anchor);
				insertNode(text_14, target, anchor);
				insertNode(div_4, target, anchor);
				appendNode(div_5, div_4);
				appendNode(label_2, div_5);
				appendNode(text_16, div_5);
				appendNode(span_3, div_5);
				appendNode(text_17, span_3);
				appendNode(text_18, span_3);
				appendNode(text_20, div_4);
				appendNode(div_6, div_4);
				appendNode(label_3, div_6);
				appendNode(text_22, div_6);
				appendNode(span_4, div_6);
				appendNode(text_23, span_4);
				appendNode(text_24, span_4);
				appendNode(text_25, span_4);
				appendNode(text_26, span_4);
			},

			p: function update(changed, state) {
				if ((changed.workShift) && text_5_value !== (text_5_value = state.workShift.speedometr_end)) {
					text_5.data = text_5_value;
				}

				if ((changed.workShift) && text_10_value !== (text_10_value = state.workShift.time_end)) {
					text_10.data = text_10_value;
				}

				if ((changed.workShift) && text_17_value !== (text_17_value = state.workShift.speedometr_end - state.workShift.speedometr_start)) {
					text_17.data = text_17_value;
				}

				if ((changed.workShift) && text_23_value !== (text_23_value = state.workShift.time_end.split(':')[0] - state.workShift.time_start.split(':')[0])) {
					text_23.data = text_23_value;
				}

				if ((changed.workShift) && text_25_value !== (text_25_value = state.workShift.time_end.split(':')[1] - state.workShift.time_start.split(':')[1])) {
					text_25.data = text_25_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_13);
				detachNode(div_3);
				detachNode(text_14);
				detachNode(div_4);
			},

			d: noop
		};
	}

	// (60:16) {{#if workTime}}
	function create_if_block_5(component, state) {
		var div;

		function click_handler(event) {
			component.endWork();
		}

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<i class=\"mdi mdi-close\"></i>\r\n                    Закрыть смену";
				this.h();
			},

			h: function hydrate() {
				addListener(div, "click", click_handler);
				div.className = "chip red accent-1 white-text z-depth-1";
				setStyle(div, "margin", "0");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(div, "click", click_handler);
			}
		};
	}

	// (4:8) {{#if workShift.open}}
	function create_if_block(component, state) {
		var div, div_1, div_2, span, text_1, text_2, text_4, div_3, text_5, text_6, text_7;

		var if_block = (state.workShift.speedometr_start) && create_if_block_1(component, state);

		var if_block_1 = (state.workShift.time_start) && create_if_block_2(component, state);

		var if_block_2 = (state.workTime) && create_if_block_3(component, state);

		var if_block_3 = (state.workShift.speedometr_end && state.workShift.time_end) && create_if_block_4(component, state);

		var if_block_4 = (state.workTime) && create_if_block_5(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				span = createElement("span");
				span.innerHTML = "<i class=\"mdi mdi-ray-start\"></i> Начало смены";
				text_1 = createText("\r\n                    ");
				if (if_block) if_block.c();
				text_2 = createText("\r\n\r\n                    ");
				if (if_block_1) if_block_1.c();
				text_4 = createText("\r\n                ");
				div_3 = createElement("div");
				text_5 = createText("\r\n                ");
				if (if_block_2) if_block_2.c();
				text_6 = createText("\r\n                ");
				if (if_block_3) if_block_3.c();
				text_7 = createText("\r\n                ");
				if (if_block_4) if_block_4.c();
				this.h();
			},

			h: function hydrate() {
				div_2.className = "row";
				setStyle(div_2, "line-height", "18px");
				div_3.className = "divider";
				div.className = "center-align aligner";
				setStyle(div, "position", "absolute");
				setStyle(div, "top", "0");
				setStyle(div, "right", "10px");
				setStyle(div, "bottom", "0");
				setStyle(div, "z-index", "99999");
				setStyle(div, "width", "125px");
				setStyle(div, "color", "white");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(div_2, div_1);
				appendNode(span, div_2);
				appendNode(text_1, div_2);
				if (if_block) if_block.m(div_2, null);
				appendNode(text_2, div_2);
				if (if_block_1) if_block_1.m(div_2, null);
				appendNode(text_4, div_1);
				appendNode(div_3, div_1);
				appendNode(text_5, div_1);
				if (if_block_2) if_block_2.m(div_1, null);
				appendNode(text_6, div_1);
				if (if_block_3) if_block_3.m(div_1, null);
				appendNode(text_7, div_1);
				if (if_block_4) if_block_4.m(div_1, null);
			},

			p: function update(changed, state) {
				if (state.workShift.speedometr_start) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block_1(component, state);
						if_block.c();
						if_block.m(div_2, text_2);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (state.workShift.time_start) {
					if (if_block_1) {
						if_block_1.p(changed, state);
					} else {
						if_block_1 = create_if_block_2(component, state);
						if_block_1.c();
						if_block_1.m(div_2, null);
					}
				} else if (if_block_1) {
					if_block_1.u();
					if_block_1.d();
					if_block_1 = null;
				}

				if (state.workTime) {
					if (if_block_2) {
						if_block_2.p(changed, state);
					} else {
						if_block_2 = create_if_block_3(component, state);
						if_block_2.c();
						if_block_2.m(div_1, text_6);
					}
				} else if (if_block_2) {
					if_block_2.u();
					if_block_2.d();
					if_block_2 = null;
				}

				if (state.workShift.speedometr_end && state.workShift.time_end) {
					if (if_block_3) {
						if_block_3.p(changed, state);
					} else {
						if_block_3 = create_if_block_4(component, state);
						if_block_3.c();
						if_block_3.m(div_1, text_7);
					}
				} else if (if_block_3) {
					if_block_3.u();
					if_block_3.d();
					if_block_3 = null;
				}

				if (state.workTime) {
					if (!if_block_4) {
						if_block_4 = create_if_block_5(component, state);
						if_block_4.c();
						if_block_4.m(div_1, null);
					}
				} else if (if_block_4) {
					if_block_4.u();
					if_block_4.d();
					if_block_4 = null;
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
				if (if_block_1) if_block_1.u();
				if (if_block_2) if_block_2.u();
				if (if_block_3) if_block_3.u();
				if (if_block_4) if_block_4.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
				if (if_block_1) if_block_1.d();
				if (if_block_2) if_block_2.d();
				if (if_block_3) if_block_3.d();
				if (if_block_4) if_block_4.d();
			}
		};
	}

	function MenuComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-1kcc5zl-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(MenuComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	MenuComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function noop() {}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return MenuComponent;
}());