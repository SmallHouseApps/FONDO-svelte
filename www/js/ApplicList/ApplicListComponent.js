/* ApplicListComponent.html generated by Svelte v1.60.2 */
var ApplicListComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-frp50r-style';
		style.textContent = ".svelte-frp50r.info-block i,.svelte-frp50r .info-block i{position:absolute;font-size:16px}.svelte-frp50r.info-block .content,.svelte-frp50r .info-block .content{margin-left:20px !important;padding-top:2.4px !important}.svelte-frp50r.order-start,.svelte-frp50r .order-start{border-top:15px solid rgb(240, 240, 240)}.svelte-frp50r.pay label,.svelte-frp50r .pay label{position:absolute;left:0;bottom:0;width:100%;text-align:center}.svelte-frp50r.items i,.svelte-frp50r .items i{margin-top:-10px;margin-bottom:-10px}.svelte-frp50r.top,.svelte-frp50r .top{padding:5px;vertical-align:top;text-align:center}.svelte-frp50r.items,.svelte-frp50r .items{border-radius:100% !important;width:50px !important;height:50px !important;color:white !important;background-color:darkgreen;margin:10px !important;font-size:33px}.svelte-frp50r.pay,.svelte-frp50r .pay,.svelte-frp50r.pay-done,.svelte-frp50r .pay-done{border-radius:100% !important;width:50px !important;height:50px !important;color:white !important;background-color:darkorange;margin:10px !important;font-size:33px}.svelte-frp50r.price label,.svelte-frp50r .price label{position:relative;top:-8px}.svelte-frp50r.price .int,.svelte-frp50r .price .int{font-weight:400;font-size:13px}.svelte-frp50r.price .decimal,.svelte-frp50r .price .decimal{color:rgb(192, 192, 192);font-size:12px}.svelte-frp50r.takeout-text .int,.svelte-frp50r .takeout-text .int{font-weight:400;font-size:13px}.svelte-frp50r.takeout-text .decimal,.svelte-frp50r .takeout-text .decimal{color:rgb(192, 192, 192);font-size:12px}.svelte-frp50r.status.tk,.svelte-frp50r .status.tk{position:absolute;top:50%;right:13px;width:20px;height:20px;border-radius:100%}.svelte-frp50r.status.dl,.svelte-frp50r .status.dl{position:absolute;top:50%;right:13px;width:20px;height:20px;border-radius:100%}.svelte-frp50r.date,.svelte-frp50r .date{position:absolute;bottom:5px;left:0;text-align:right;width:100%}a.svelte-frp50r .badge,.svelte-frp50r a .badge{position:absolute;top:0;right:7px;width:15px;height:15px;border-radius:100%;line-height:15px;font-size:10px}.svelte-frp50r.left-col,.svelte-frp50r .left-col{text-align:center;width:80px !important;border-bottom:1px solid white}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, table;

		var each_value = state.applics;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				applic: each_value[i],
				i: i
			}));
		}

		function touchstart_handler_1(event) {
			component.set({ touched: true });
		}

		function touchend_handler(event) {
			component.set({ touched: false });
		}

		return {
			c: function create() {
				div = createElement("div");
				table = createElement("table");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				this.h();
			},

			h: function hydrate() {
				table.id = "ApplicListComponentTable";
				addListener(div, "touchstart", touchstart_handler_1);
				addListener(div, "touchend", touchend_handler);
				div.id = "ApplicListComponent";
				div.className = "svelte-frp50r";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(table, div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(table, null);
				}
			},

			p: function update(changed, state) {
				var each_value = state.applics;

				if (changed.sy || changed.screenHeight || changed.applics) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							applic: each_value[i],
							i: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(table, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy() {
				destroyEach(each_blocks);

				removeListener(div, "touchstart", touchstart_handler_1);
				removeListener(div, "touchend", touchend_handler);
			}
		};
	}

	// (3:8) {{#each applics as applic, i}}
	function create_each_block(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var if_block_anchor;

		function select_block_type_7(state) {
			if ((state.sy - state.screenHeight/2 <= applic.offsetTop) && (state.sy + state.screenHeight*1.5 >= applic.offsetTop)) return create_if_block;
			return create_if_block_26;
		}

		var current_block_type = select_block_type_7(state);
		var if_block = current_block_type(component, state);

		return {
			c: function create() {
				if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if (current_block_type === (current_block_type = select_block_type_7(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			u: function unmount() {
				if_block.u();
				detachNode(if_block_anchor);
			},

			d: function destroy() {
				if_block.d();
			}
		};
	}

	// (8:16) {{#if applic.canceled}}
	function create_if_block_1(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var span, span_class_value;

		return {
			c: function create() {
				span = createElement("span");
				this.h();
			},

			h: function hydrate() {
				span.className = span_class_value = "mdi mdi-cancel " + (applic.type == 1 ? 'dl' : 'tk') + " status grey white-text";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && span_class_value !== (span_class_value = "mdi mdi-cancel " + (applic.type == 1 ? 'dl' : 'tk') + " status grey white-text")) {
					span.className = span_class_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (10:40) 
	function create_if_block_2(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var span, span_class_value;

		return {
			c: function create() {
				span = createElement("span");
				this.h();
			},

			h: function hydrate() {
				span.className = span_class_value = "mdi mdi-close " + (applic.type == 1 ? 'dl' : 'tk') + " status red white-text";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && span_class_value !== (span_class_value = "mdi mdi-close " + (applic.type == 1 ? 'dl' : 'tk') + " status red white-text")) {
					span.className = span_class_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (12:38) 
	function create_if_block_3(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var span, span_class_value;

		return {
			c: function create() {
				span = createElement("span");
				this.h();
			},

			h: function hydrate() {
				span.className = span_class_value = "mdi mdi-check " + (applic.type == 1 ? 'dl' : 'tk') + " status green white-text";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && span_class_value !== (span_class_value = "mdi mdi-check " + (applic.type == 1 ? 'dl' : 'tk') + " status green white-text")) {
					span.className = span_class_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (18:24) {{#if applic.order.pay_type == 'cashpay'}}
	function create_if_block_5(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var i;

		return {
			c: function create() {
				i = createElement("i");
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-cash";
			},

			m: function mount(target, anchor) {
				insertNode(i, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(i);
			},

			d: noop
		};
	}

	// (20:69) 
	function create_if_block_6(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var i;

		return {
			c: function create() {
				i = createElement("i");
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-credit-card";
			},

			m: function mount(target, anchor) {
				insertNode(i, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(i);
			},

			d: noop
		};
	}

	// (22:68) 
	function create_if_block_7(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var i;

		return {
			c: function create() {
				i = createElement("i");
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-credit-card-off";
			},

			m: function mount(target, anchor) {
				insertNode(i, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(i);
			},

			d: noop
		};
	}

	// (36:32) {{#if applic.decimal > 0}}
	function create_if_block_11(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var span, text_value = applic.decimal, text, text_1;

		return {
			c: function create() {
				span = createElement("span");
				text = createText(text_value);
				text_1 = createText("₽");
				this.h();
			},

			h: function hydrate() {
				span.className = "decimal";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				appendNode(text, span);
				appendNode(text_1, span);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && text_value !== (text_value = applic.decimal)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(span);
			},

			d: noop
		};
	}

	// (40:28) {{#if applic.order.pay_type == 'cashpay'}}
	function create_if_block_12(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var label;

		return {
			c: function create() {
				label = createElement("label");
				label.textContent = "Наличными";
			},

			m: function mount(target, anchor) {
				insertNode(label, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(label);
			},

			d: noop
		};
	}

	// (42:73) 
	function create_if_block_13(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var label;

		return {
			c: function create() {
				label = createElement("label");
				label.textContent = "Картой";
			},

			m: function mount(target, anchor) {
				insertNode(label, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(label);
			},

			d: noop
		};
	}

	// (44:72) 
	function create_if_block_14(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var label;

		return {
			c: function create() {
				label = createElement("label");
				label.textContent = "Предоплата";
			},

			m: function mount(target, anchor) {
				insertNode(label, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(label);
			},

			d: noop
		};
	}

	// (28:24) {{#if applic.items.length == 0}}
	function create_if_block_9(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<label class=\"int red-text text-darken-2\">Ожидается выполнение забора</label>";
				this.h();
			},

			h: function hydrate() {
				setStyle(div, "line-height", "11px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (32:24) {{else}}
	function create_if_block_10(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div, div_1, span, text_value = applic.int, text, text_1_value = applic.decimal > 0 ? ',' : '₽', text_1, text_2, text_4;

		var if_block = (applic.decimal > 0) && create_if_block_11(component, state);

		function select_block_type_2(state) {
			if (applic.order.pay_type == 'cashpay') return create_if_block_12;
			if (applic.order.pay_type == 'cardpay') return create_if_block_13;
			if (applic.order.pay_type == 'prepay') return create_if_block_14;
			return null;
		}

		var current_block_type = select_block_type_2(state);
		var if_block_1 = current_block_type && current_block_type(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				span = createElement("span");
				text = createText(text_value);
				text_1 = createText(text_1_value);
				text_2 = createText("\r\n                                ");
				if (if_block) if_block.c();
				text_4 = createText("\r\n                            ");
				if (if_block_1) if_block_1.c();
				this.h();
			},

			h: function hydrate() {
				span.className = "int";
				setStyle(div_1, "width", "100%");
				div.className = "price";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(span, div_1);
				appendNode(text, span);
				appendNode(text_1, span);
				appendNode(text_2, div_1);
				if (if_block) if_block.m(div_1, null);
				appendNode(text_4, div);
				if (if_block_1) if_block_1.m(div, null);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && text_value !== (text_value = applic.int)) {
					text.data = text_value;
				}

				if ((changed.applics) && text_1_value !== (text_1_value = applic.decimal > 0 ? ',' : '₽')) {
					text_1.data = text_1_value;
				}

				if (applic.decimal > 0) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block_11(component, state);
						if_block.c();
						if_block.m(div_1, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (current_block_type !== (current_block_type = select_block_type_2(state))) {
					if (if_block_1) {
						if_block_1.u();
						if_block_1.d();
					}
					if_block_1 = current_block_type && current_block_type(component, state);
					if (if_block_1) if_block_1.c();
					if (if_block_1) if_block_1.m(div, null);
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
				if (if_block_1) if_block_1.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
				if (if_block_1) if_block_1.d();
			}
		};
	}

	// (27:20) {{#if !applic.done && !applic.denial && !applic.canceled}}
	function create_if_block_8(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var if_block_anchor;

		function select_block_type_3(state) {
			if (applic.items.length == 0) return create_if_block_9;
			return create_if_block_10;
		}

		var current_block_type = select_block_type_3(state);
		var if_block = current_block_type(component, state);

		return {
			c: function create() {
				if_block.c();
				if_block_anchor = createComment();
			},

			m: function mount(target, anchor) {
				if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if (current_block_type === (current_block_type = select_block_type_3(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			u: function unmount() {
				if_block.u();
				detachNode(if_block_anchor);
			},

			d: function destroy() {
				if_block.d();
			}
		};
	}

	// (49:44) 
	function create_if_block_15(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int red-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (53:46) 
	function create_if_block_16(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int grey-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (57:42) 
	function create_if_block_17(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int green-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (68:20) {{#if !applic.done && !applic.denial && !applic.canceled}}
	function create_if_block_19(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var span, text_1, div, span_1, text_2_value = applic.items.length, text_2, span_2, text_4, label, text_5, text_6_value = applic.weight, text_6, text_7;

		return {
			c: function create() {
				span = createElement("span");
				span.textContent = "Забрать";
				text_1 = createText("\r\n                    ");
				div = createElement("div");
				span_1 = createElement("span");
				text_2 = createText(text_2_value);
				span_2 = createElement("span");
				span_2.textContent = "шт";
				text_4 = createText("\r\n                        ");
				label = createElement("label");
				text_5 = createText("~");
				text_6 = createText(text_6_value);
				text_7 = createText("кг");
				this.h();
			},

			h: function hydrate() {
				span.className = "int";
				span_1.className = "int";
				span_2.className = "decimal";
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(span, target, anchor);
				insertNode(text_1, target, anchor);
				insertNode(div, target, anchor);
				appendNode(span_1, div);
				appendNode(text_2, span_1);
				appendNode(span_2, div);
				appendNode(text_4, div);
				appendNode(label, div);
				appendNode(text_5, label);
				appendNode(text_6, label);
				appendNode(text_7, label);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && text_2_value !== (text_2_value = applic.items.length)) {
					text_2.data = text_2_value;
				}

				if ((changed.applics) && text_6_value !== (text_6_value = applic.weight)) {
					text_6.data = text_6_value;
				}
			},

			u: function unmount() {
				detachNode(span);
				detachNode(text_1);
				detachNode(div);
			},

			d: noop
		};
	}

	// (76:44) 
	function create_if_block_20(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int red-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (80:46) 
	function create_if_block_21(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int grey-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (84:42) 
	function create_if_block_22(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<span class=\"int green-text\">Завершен</span>";
				this.h();
			},

			h: function hydrate() {
				div.className = "takeout-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (16:16) {{#if applic.type == 1}}
	function create_if_block_4(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div, text_1, if_block_3_anchor;

		function select_block_type_1(state) {
			if (applic.order.pay_type == 'cashpay') return create_if_block_5;
			if (applic.order.pay_type == 'cardpay') return create_if_block_6;
			if (applic.order.pay_type == 'prepay') return create_if_block_7;
			return null;
		}

		var current_block_type = select_block_type_1(state);
		var if_block = current_block_type && current_block_type(component, state);

		function select_block_type_4(state) {
			if (!applic.done && !applic.denial && !applic.canceled) return create_if_block_8;
			if (applic.denial) return create_if_block_15;
			if (applic.canceled) return create_if_block_16;
			if (applic.done) return create_if_block_17;
			return null;
		}

		var current_block_type_1 = select_block_type_4(state);
		var if_block_3 = current_block_type_1 && current_block_type_1(component, state);

		return {
			c: function create() {
				div = createElement("div");
				if (if_block) if_block.c();
				text_1 = createText("\r\n                    \r\n                    ");
				if (if_block_3) if_block_3.c();
				if_block_3_anchor = createComment();
				this.h();
			},

			h: function hydrate() {
				div.className = "pay";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				if (if_block) if_block.m(div, null);
				insertNode(text_1, target, anchor);
				if (if_block_3) if_block_3.m(target, anchor);
				insertNode(if_block_3_anchor, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if (current_block_type !== (current_block_type = select_block_type_1(state))) {
					if (if_block) {
						if_block.u();
						if_block.d();
					}
					if_block = current_block_type && current_block_type(component, state);
					if (if_block) if_block.c();
					if (if_block) if_block.m(div, null);
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_4(state)) && if_block_3) {
					if_block_3.p(changed, state);
				} else {
					if (if_block_3) {
						if_block_3.u();
						if_block_3.d();
					}
					if_block_3 = current_block_type_1 && current_block_type_1(component, state);
					if (if_block_3) if_block_3.c();
					if (if_block_3) if_block_3.m(if_block_3_anchor.parentNode, if_block_3_anchor);
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
				detachNode(text_1);
				if (if_block_3) if_block_3.u();
				detachNode(if_block_3_anchor);
			},

			d: function destroy() {
				if (if_block) if_block.d();
				if (if_block_3) if_block_3.d();
			}
		};
	}

	// (62:16) {{else}}
	function create_if_block_18(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div, text_2, if_block_anchor;

		function select_block_type_5(state) {
			if (!applic.done && !applic.denial && !applic.canceled) return create_if_block_19;
			if (applic.denial) return create_if_block_20;
			if (applic.canceled) return create_if_block_21;
			if (applic.done) return create_if_block_22;
			return null;
		}

		var current_block_type = select_block_type_5(state);
		var if_block = current_block_type && current_block_type(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<div class=\"items\"><i class=\"mdi mdi-dropbox\"></i></div>";
				text_2 = createText("\r\n                    ");
				if (if_block) if_block.c();
				if_block_anchor = createComment();
				this.h();
			},

			h: function hydrate() {
				div.className = " red-text tex-lighten-2";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				insertNode(text_2, target, anchor);
				if (if_block) if_block.m(target, anchor);
				insertNode(if_block_anchor, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if (current_block_type === (current_block_type = select_block_type_5(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if (if_block) {
						if_block.u();
						if_block.d();
					}
					if_block = current_block_type && current_block_type(component, state);
					if (if_block) if_block.c();
					if (if_block) if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_2);
				if (if_block) if_block.u();
				detachNode(if_block_anchor);
			},

			d: function destroy() {
				if (if_block) if_block.d();
			}
		};
	}

	// (129:20) {{#if applic.order.files.length > 0}}
	function create_if_block_23(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div, text_value = applic.order.files.length, text;

		return {
			c: function create() {
				div = createElement("div");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				div.className = "badge red lighten-2 white-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(text, div);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && text_value !== (text_value = applic.order.files.length)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (135:20) {{#if applic.comments.length > 0}}
	function create_if_block_24(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var div, text_value = applic.comments.length, text;

		return {
			c: function create() {
				div = createElement("div");
				text = createText(text_value);
				this.h();
			},

			h: function hydrate() {
				div.className = "badge red lighten-2 white-text";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(text, div);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if ((changed.applics) && text_value !== (text_value = applic.comments.length)) {
					text.data = text_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (142:16) {{#if applic.dropdown }}
	function create_if_block_25(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var ul, li, a, li_1, li_2, li_3, li_4, li_5, a_3, a_3_href_value, li_6, a_4, a_4_href_value, li_7, a_5, li_8, li_9, ul_id_value;

		return {
			c: function create() {
				ul = createElement("ul");
				li = createElement("li");
				a = createElement("a");
				a.innerHTML = "<i class=\"mdi mdi-check\"></i>Выполнить";
				li_1 = createElement("li");
				li_2 = createElement("li");
				li_2.innerHTML = "<a href=\"#!\" class=\"red-text darken-2\"><i class=\"mdi mdi-map-marker\"></i>Отказ на месте</a>";
				li_3 = createElement("li");
				li_3.innerHTML = "<a href=\"#!\" class=\"red-text darken-2\"><i class=\"mdi mdi-phone-hangup\"></i>Отказ по телефону</a>";
				li_4 = createElement("li");
				li_5 = createElement("li");
				a_3 = createElement("a");
				a_3.innerHTML = "<i class=\"mdi mdi-navigation\"></i>Построить маршрут";
				li_6 = createElement("li");
				a_4 = createElement("a");
				a_4.innerHTML = "<i class=\"mdi mdi-phone\"></i>Позвонить";
				li_7 = createElement("li");
				a_5 = createElement("a");
				a_5.innerHTML = "<i class=\"mdi mdi-eye\"></i>Детализация";
				li_8 = createElement("li");
				li_9 = createElement("li");
				li_9.innerHTML = "<a class=\"grey-text text-darken-2\"><i class=\"mdi mdi-close\"></i>Закрыть</a>";
				this.h();
			},

			h: function hydrate() {
				addListener(a, "click", click_handler_4);
				a.className = "green-text";

				a._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				li_1.className = "divider";
				li_1.tabIndex = "-1";
				li_4.className = "divider";
				li_4.tabIndex = "-1";
				a_3.href = a_3_href_value = "geo:" + applic.geo_cord[0] + "," + applic.geo_cord[1];
				a_3.className = "blue-text darken-2";
				a_4.href = a_4_href_value = "tel:8" + applic.phone;
				a_4.className = "blue-text darken-2";
				addListener(a_5, "click", click_handler_5);
				a_5.className = "blue-text darken-2";

				a_5._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				li_8.className = "divider";
				li_8.tabIndex = "-1";
				ul.id = ul_id_value = "dropdown" + applic.id;
				ul.className = "dropdown-content";
			},

			m: function mount(target, anchor) {
				insertNode(ul, target, anchor);
				appendNode(li, ul);
				appendNode(a, li);
				appendNode(li_1, ul);
				appendNode(li_2, ul);
				appendNode(li_3, ul);
				appendNode(li_4, ul);
				appendNode(li_5, ul);
				appendNode(a_3, li_5);
				appendNode(li_6, ul);
				appendNode(a_4, li_6);
				appendNode(li_7, ul);
				appendNode(a_5, li_7);
				appendNode(li_8, ul);
				appendNode(li_9, ul);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				a._svelte.each_value = state.each_value;
				a._svelte.i = state.i;

				if ((changed.applics) && a_3_href_value !== (a_3_href_value = "geo:" + applic.geo_cord[0] + "," + applic.geo_cord[1])) {
					a_3.href = a_3_href_value;
				}

				if ((changed.applics) && a_4_href_value !== (a_4_href_value = "tel:8" + applic.phone)) {
					a_4.href = a_4_href_value;
				}

				a_5._svelte.each_value = state.each_value;
				a_5._svelte.i = state.i;

				if ((changed.applics) && ul_id_value !== (ul_id_value = "dropdown" + applic.id)) {
					ul.id = ul_id_value;
				}
			},

			u: function unmount() {
				detachNode(ul);
			},

			d: function destroy() {
				removeListener(a, "click", click_handler_4);
				removeListener(a_5, "click", click_handler_5);
			}
		};
	}

	// (4:8) {{#if (sy - screenHeight/2 <= applic.offsetTop) && (sy + screenHeight*1.5 >= applic.offsetTop) }}
	function create_if_block(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var tr, td, text, td_class_value, td_style_value, text_2, td_1, div, i, text_3, div_1, span, text_4_value = applic.address, text_4, text_7, div_2, i_1, text_8, div_3, span_1, label, text_9_value = applic.date, text_9, text_10, text_11_value = applic.time_start, text_11, text_12, text_13_value = applic.time_end, text_13, text_16, div_4, i_2, text_17, div_5, span_2, text_18_value = applic.name, text_18, text_21, div_6, i_3, text_22, div_7, span_3, text_23_value = applic.phone, text_23, td_1_style_value, text_27, td_2, div_8, label_1, text_29, label_2, text_30_value = applic.id, text_30, text_31, label_3, text_32_value = applic.applications_name, text_32, text_34, a, i_4, text_35, text_37, a_1, i_5, text_38, text_40, button, button_id_value, button_data_target_value, text_42, tr_id_value, tr_class_value;

		function select_block_type(state) {
			if (applic.canceled) return create_if_block_1;
			if (applic.denial) return create_if_block_2;
			if (applic.done) return create_if_block_3;
			return null;
		}

		var current_block_type = select_block_type(state);
		var if_block = current_block_type && current_block_type(component, state);

		function select_block_type_6(state) {
			if (applic.type == 1) return create_if_block_4;
			return create_if_block_18;
		}

		var current_block_type_1 = select_block_type_6(state);
		var if_block_3 = current_block_type_1(component, state);

		var if_block_4 = (applic.order.files.length > 0) && create_if_block_23(component, state);

		var if_block_5 = (applic.comments.length > 0) && create_if_block_24(component, state);

		var if_block_6 = (applic.dropdown) && create_if_block_25(component, state);

		return {
			c: function create() {
				tr = createElement("tr");
				td = createElement("td");
				if (if_block) if_block.c();
				text = createText("\r\n\r\n                ");
				if_block_3.c();
				text_2 = createText("\r\n            ");
				td_1 = createElement("td");
				div = createElement("div");
				i = createElement("i");
				text_3 = createText("\r\n                    ");
				div_1 = createElement("div");
				span = createElement("span");
				text_4 = createText(text_4_value);
				text_7 = createText("\r\n                \r\n                ");
				div_2 = createElement("div");
				i_1 = createElement("i");
				text_8 = createText("\r\n                    ");
				div_3 = createElement("div");
				span_1 = createElement("span");
				label = createElement("label");
				text_9 = createText(text_9_value);
				text_10 = createText(" с ");
				text_11 = createText(text_11_value);
				text_12 = createText(" до ");
				text_13 = createText(text_13_value);
				text_16 = createText("\r\n                \r\n                ");
				div_4 = createElement("div");
				i_2 = createElement("i");
				text_17 = createText("\r\n                    ");
				div_5 = createElement("div");
				span_2 = createElement("span");
				text_18 = createText(text_18_value);
				text_21 = createText("\r\n\r\n                ");
				div_6 = createElement("div");
				i_3 = createElement("i");
				text_22 = createText("\r\n                    ");
				div_7 = createElement("div");
				span_3 = createElement("span");
				text_23 = createText(text_23_value);
				text_27 = createText("\r\n            \r\n            ");
				td_2 = createElement("td");
				div_8 = createElement("div");
				label_1 = createElement("label");
				label_1.textContent = "Номера";
				text_29 = createText("\r\n                    ");
				label_2 = createElement("label");
				text_30 = createText(text_30_value);
				text_31 = createText("\r\n                    ");
				label_3 = createElement("label");
				text_32 = createText(text_32_value);
				text_34 = createText("\r\n                ");
				a = createElement("a");
				i_4 = createElement("i");
				text_35 = createText("\r\n                    ");
				if (if_block_4) if_block_4.c();
				text_37 = createText("\r\n                ");
				a_1 = createElement("a");
				i_5 = createElement("i");
				text_38 = createText("\r\n                    ");
				if (if_block_5) if_block_5.c();
				text_40 = createText("\r\n                ");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-dots-horizontal\" style=\"height: 15px; line-height: 15px;\"></i>";
				text_42 = createText("\r\n                ");
				if (if_block_6) if_block_6.c();
				this.h();
			},

			h: function hydrate() {
				addListener(td, "click", click_handler);
				td.className = td_class_value = " left-col waves-effect " + (applic.type == 1 ? 'waves-delivery' : 'waves-takeout');
				td.style.cssText = td_style_value = applic.done ? 'opacity: 0.5;' : 'opacity: 1;';

				td._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				i.className = "mdi mdi-home grey-text text-darken-1";
				div_1.className = "content";
				div.className = "info-block";
				i_1.className = "mdi mdi-clock grey-text text-darken-1";
				div_3.className = "content";
				div_2.className = "info-block";
				i_2.className = "mdi mdi-account grey-text text-darken-1";
				div_5.className = "content";
				div_4.className = "info-block";
				i_3.className = "mdi mdi-phone grey-text text-darken-1";
				div_7.className = "content";
				div_6.className = "info-block";
				addListener(td_1, "click", click_handler_1);
				td_1.className = "waves-effect waves-light";
				td_1.style.cssText = td_1_style_value = "" + (applic.done ? 'opacity: 0.5;' : 'opacity: 1;') + " padding-left: 10px;";

				td_1._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				div_8.className = "info-block";
				setStyle(div_8, "line-height", "12px");
				i_4.className = "mdi mdi-paperclip";
				addListener(a, "click", click_handler_2);
				a.href = "#modal/comments";
				a.className = "btn-flat blue-text waves-effect waves-blue";

				a._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				i_5.className = "mdi mdi-message";
				addListener(a_1, "click", click_handler_3);
				a_1.href = "#modal/comments";
				a_1.className = "btn-flat blue-text waves-effect waves-blue";

				a_1._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				addListener(button, "touchstart", touchstart_handler);
				button.id = button_id_value = "dropdown" + applic.id + "-trigger";
				button.className = "dropdown-trigger btn-flat blue-text";
				button.dataset.target = button_data_target_value = "dropdown" + applic.id;

				button._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				td_2.className = "top";
				setStyle(td_2, "width", "10%");
				tr.id = tr_id_value = "applic-row-" + applic.id;
				tr.className = tr_class_value = "applic-tr " + (applic.orderStart ? 'order-start' : '') + " white";
			},

			m: function mount(target, anchor) {
				insertNode(tr, target, anchor);
				appendNode(td, tr);
				if (if_block) if_block.m(td, null);
				appendNode(text, td);
				if_block_3.m(td, null);
				appendNode(text_2, tr);
				appendNode(td_1, tr);
				appendNode(div, td_1);
				appendNode(i, div);
				appendNode(text_3, div);
				appendNode(div_1, div);
				appendNode(span, div_1);
				appendNode(text_4, span);
				appendNode(text_7, td_1);
				appendNode(div_2, td_1);
				appendNode(i_1, div_2);
				appendNode(text_8, div_2);
				appendNode(div_3, div_2);
				appendNode(span_1, div_3);
				appendNode(label, span_1);
				appendNode(text_9, label);
				appendNode(text_10, span_1);
				appendNode(text_11, span_1);
				appendNode(text_12, span_1);
				appendNode(text_13, span_1);
				appendNode(text_16, td_1);
				appendNode(div_4, td_1);
				appendNode(i_2, div_4);
				appendNode(text_17, div_4);
				appendNode(div_5, div_4);
				appendNode(span_2, div_5);
				appendNode(text_18, span_2);
				appendNode(text_21, td_1);
				appendNode(div_6, td_1);
				appendNode(i_3, div_6);
				appendNode(text_22, div_6);
				appendNode(div_7, div_6);
				appendNode(span_3, div_7);
				appendNode(text_23, span_3);
				appendNode(text_27, tr);
				appendNode(td_2, tr);
				appendNode(div_8, td_2);
				appendNode(label_1, div_8);
				appendNode(text_29, div_8);
				appendNode(label_2, div_8);
				appendNode(text_30, label_2);
				appendNode(text_31, div_8);
				appendNode(label_3, div_8);
				appendNode(text_32, label_3);
				appendNode(text_34, td_2);
				appendNode(a, td_2);
				appendNode(i_4, a);
				appendNode(text_35, a);
				if (if_block_4) if_block_4.m(a, null);
				appendNode(text_37, td_2);
				appendNode(a_1, td_2);
				appendNode(i_5, a_1);
				appendNode(text_38, a_1);
				if (if_block_5) if_block_5.m(a_1, null);
				appendNode(text_40, td_2);
				appendNode(button, td_2);
				appendNode(text_42, td_2);
				if (if_block_6) if_block_6.m(td_2, null);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;
				if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if (if_block) {
						if_block.u();
						if_block.d();
					}
					if_block = current_block_type && current_block_type(component, state);
					if (if_block) if_block.c();
					if (if_block) if_block.m(td, text);
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_6(state)) && if_block_3) {
					if_block_3.p(changed, state);
				} else {
					if_block_3.u();
					if_block_3.d();
					if_block_3 = current_block_type_1(component, state);
					if_block_3.c();
					if_block_3.m(td, null);
				}

				if ((changed.applics) && td_class_value !== (td_class_value = " left-col waves-effect " + (applic.type == 1 ? 'waves-delivery' : 'waves-takeout'))) {
					td.className = td_class_value;
				}

				if ((changed.applics) && td_style_value !== (td_style_value = applic.done ? 'opacity: 0.5;' : 'opacity: 1;')) {
					td.style.cssText = td_style_value;
				}

				td._svelte.each_value = state.each_value;
				td._svelte.i = state.i;

				if ((changed.applics) && text_4_value !== (text_4_value = applic.address)) {
					text_4.data = text_4_value;
				}

				if ((changed.applics) && text_9_value !== (text_9_value = applic.date)) {
					text_9.data = text_9_value;
				}

				if ((changed.applics) && text_11_value !== (text_11_value = applic.time_start)) {
					text_11.data = text_11_value;
				}

				if ((changed.applics) && text_13_value !== (text_13_value = applic.time_end)) {
					text_13.data = text_13_value;
				}

				if ((changed.applics) && text_18_value !== (text_18_value = applic.name)) {
					text_18.data = text_18_value;
				}

				if ((changed.applics) && text_23_value !== (text_23_value = applic.phone)) {
					text_23.data = text_23_value;
				}

				if ((changed.applics) && td_1_style_value !== (td_1_style_value = "" + (applic.done ? 'opacity: 0.5;' : 'opacity: 1;') + " padding-left: 10px;")) {
					td_1.style.cssText = td_1_style_value;
				}

				td_1._svelte.each_value = state.each_value;
				td_1._svelte.i = state.i;

				if ((changed.applics) && text_30_value !== (text_30_value = applic.id)) {
					text_30.data = text_30_value;
				}

				if ((changed.applics) && text_32_value !== (text_32_value = applic.applications_name)) {
					text_32.data = text_32_value;
				}

				if (applic.order.files.length > 0) {
					if (if_block_4) {
						if_block_4.p(changed, state);
					} else {
						if_block_4 = create_if_block_23(component, state);
						if_block_4.c();
						if_block_4.m(a, null);
					}
				} else if (if_block_4) {
					if_block_4.u();
					if_block_4.d();
					if_block_4 = null;
				}

				a._svelte.each_value = state.each_value;
				a._svelte.i = state.i;

				if (applic.comments.length > 0) {
					if (if_block_5) {
						if_block_5.p(changed, state);
					} else {
						if_block_5 = create_if_block_24(component, state);
						if_block_5.c();
						if_block_5.m(a_1, null);
					}
				} else if (if_block_5) {
					if_block_5.u();
					if_block_5.d();
					if_block_5 = null;
				}

				a_1._svelte.each_value = state.each_value;
				a_1._svelte.i = state.i;

				if ((changed.applics) && button_id_value !== (button_id_value = "dropdown" + applic.id + "-trigger")) {
					button.id = button_id_value;
				}

				if ((changed.applics) && button_data_target_value !== (button_data_target_value = "dropdown" + applic.id)) {
					button.dataset.target = button_data_target_value;
				}

				button._svelte.each_value = state.each_value;
				button._svelte.i = state.i;

				if (applic.dropdown) {
					if (if_block_6) {
						if_block_6.p(changed, state);
					} else {
						if_block_6 = create_if_block_25(component, state);
						if_block_6.c();
						if_block_6.m(td_2, null);
					}
				} else if (if_block_6) {
					if_block_6.u();
					if_block_6.d();
					if_block_6 = null;
				}

				if ((changed.applics) && tr_id_value !== (tr_id_value = "applic-row-" + applic.id)) {
					tr.id = tr_id_value;
				}

				if ((changed.applics) && tr_class_value !== (tr_class_value = "applic-tr " + (applic.orderStart ? 'order-start' : '') + " white")) {
					tr.className = tr_class_value;
				}
			},

			u: function unmount() {
				detachNode(tr);
				if (if_block) if_block.u();
				if_block_3.u();
				if (if_block_4) if_block_4.u();
				if (if_block_5) if_block_5.u();
				if (if_block_6) if_block_6.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
				if_block_3.d();
				removeListener(td, "click", click_handler);
				removeListener(td_1, "click", click_handler_1);
				if (if_block_4) if_block_4.d();
				removeListener(a, "click", click_handler_2);
				if (if_block_5) if_block_5.d();
				removeListener(a_1, "click", click_handler_3);
				removeListener(button, "touchstart", touchstart_handler);
				if (if_block_6) if_block_6.d();
			}
		};
	}

	// (186:8) {{else}}
	function create_if_block_26(component, state) {
		var applic = state.applic, each_value = state.each_value, i = state.i;
		var tr;

		return {
			c: function create() {
				tr = createElement("tr");
				this.h();
			},

			h: function hydrate() {
				setStyle(tr, "height", "155px");
			},

			m: function mount(target, anchor) {
				insertNode(tr, target, anchor);
			},

			p: function update(changed, state) {
				applic = state.applic;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(tr);
			},

			d: noop
		};
	}

	function click_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showItemCards(applic.id, event);
	}

	function click_handler_1(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showApplic(applic.id);
	}

	function click_handler_2(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showMessages(applic.id, 'files');
	}

	function click_handler_3(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showMessages(applic.id, 'comments');
	}

	function touchstart_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.initDropdown(this, applic.id);
	}

	function click_handler_4(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showItemCards(applic.id, event);
	}

	function click_handler_5(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, applic = each_value[i];
		component.showApplic(applic.id);
	}

	function ApplicListComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-frp50r-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ApplicListComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	ApplicListComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function createComment() {
		return document.createComment('');
	}

	function noop() {}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return ApplicListComponent;
}());