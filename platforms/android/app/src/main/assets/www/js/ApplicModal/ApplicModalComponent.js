/* ApplicModalComponent.html generated by Svelte v1.60.2 */
var ApplicModalComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-c9zlu2-style';
		style.textContent = ".svelte-c9zlu2#ApplicModalComponent,.svelte-c9zlu2 #ApplicModalComponent{color:#515151;background-color:#f0f0f0;width:100vw;height:calc(100vh - 56px);transform:translate3d(0, 100vh, 0);transition:transform 200ms}.svelte-c9zlu2.scroll-content,.svelte-c9zlu2 .scroll-content{-webkit-overflow-scrolling:touch;overflow-y:auto;overflow-x:hidden;position:absolute;width:100%;height:100%}.svelte-c9zlu2.applic-header,.svelte-c9zlu2 .applic-header{background-color:darkorange;width:100%;padding:15px;padding-top:0}.svelte-c9zlu2.applic-header p,.svelte-c9zlu2 .applic-header p{font-size:20px;margin:0;margin-bottom:5px}.svelte-c9zlu2.comment,.svelte-c9zlu2 .comment{margin-top:15px;padding:25px;position:relative;background-color:#f6f6f6;position:relative;border-radius:15px}.svelte-c9zlu2.content-to-show,.svelte-c9zlu2 .content-to-show{height:0;transition:height 200ms;overflow:hidden}.svelte-c9zlu2.file,.svelte-c9zlu2 .file{position:relative;max-width:90px;display:inline-block}.svelte-c9zlu2.file p,.svelte-c9zlu2 .file p{margin:0;margin-top:-26px;text-align:center}.svelte-c9zlu2.mdi-chevron-down,.svelte-c9zlu2 .mdi-chevron-down{transition:transform 200ms}.svelte-c9zlu2.delivery,.svelte-c9zlu2 .delivery,.svelte-c9zlu2.takeout,.svelte-c9zlu2 .takeout{position:absolute;top:0;left:0;width:100%;height:80px}b.svelte-c9zlu2,.svelte-c9zlu2 b{font-weight:400 !important}.svelte-c9zlu2.card,.svelte-c9zlu2 .card{margin:10px;padding:15px;transform:translate3d(0, 100vh, 0);transition:transform 200ms}.svelte-c9zlu2.info,.svelte-c9zlu2 .info{padding-top:60px}.svelte-c9zlu2.info i,.svelte-c9zlu2 .info i{position:absolute;font-size:20px;top:10px;right:10px}.svelte-c9zlu2.info h5,.svelte-c9zlu2 .info h5{margin:0;position:absolute;top:10px;left:10px}.svelte-c9zlu2.dots span,.svelte-c9zlu2 .dots span{position:relative;max-width:44vw;margin-top:-15px !important}.svelte-c9zlu2.dots b,.svelte-c9zlu2 .dots b{color:grey;margin-top:-15px !important}.svelte-c9zlu2.dots:after,.svelte-c9zlu2 .dots:after{content:'_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _';color:#d8d8d8;display:block;white-space:nowrap;overflow:hidden;margin-top:-36px !important}ul.svelte-c9zlu2:focus,.svelte-c9zlu2 ul:focus{user-select:none !important}ul.svelte-c9zlu2 li:focus,.svelte-c9zlu2 ul li:focus{user-select:none !important}ul.svelte-c9zlu2 .intro,.svelte-c9zlu2 ul .intro{margin-left:17px;position:absolute;z-index:9;top:20px}ul.svelte-c9zlu2,.svelte-c9zlu2 ul{background-color:white;margin-top:25px}ul.svelte-c9zlu2 li,.svelte-c9zlu2 ul li{transition:box-shadow 50ms;user-select:none;position:relative}ul.svelte-c9zlu2 li .content,.svelte-c9zlu2 ul li .content{background-color:white;padding-top:5px;padding-bottom:5px;font-size:16px}ul.svelte-c9zlu2 li .content i,.svelte-c9zlu2 ul li .content i{margin-right:15px;margin-left:10px}.svelte-c9zlu2.slip-reordering,.svelte-c9zlu2 .slip-reordering{box-shadow:0 24px 38px 3px rgba(0,0,0,0.14), 0 9px 46px 8px rgba(0,0,0,0.12), 0 11px 15px -7px rgba(0,0,0,0.2)}tr.svelte-c9zlu2:last-child,.svelte-c9zlu2 tr:last-child{border-bottom:none}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, div_1, div_1_class_value, text;

		var if_block = (state.isLoad) && create_if_block(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				text = createText("\r\n\t");
				if (if_block) if_block.c();
				this.h();
			},

			h: function hydrate() {
				div_1.className = div_1_class_value = state.type == 1 ? 'delivery' : 'takeout';
				div.id = "ApplicModalComponent";
				div.className = "svelte-c9zlu2";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text, div);
				if (if_block) if_block.m(div, null);
			},

			p: function update(changed, state) {
				if ((changed.type) && div_1_class_value !== (div_1_class_value = state.type == 1 ? 'delivery' : 'takeout')) {
					div_1.className = div_1_class_value;
				}

				if (state.isLoad) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block(component, state);
						if_block.c();
						if_block.m(div, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
			}
		};
	}

	// (91:3) {{#each infoOptions as option, i}}
	function create_each_block(component, state) {
		var option = state.option, each_value = state.each_value, i = state.i;
		var div, span, b, text_value = option.label, text, text_1, span_1, text_2_value = option.data ? option.data : 'Нет данных', text_2, text_5, br;

		return {
			c: function create() {
				div = createElement("div");
				span = createElement("span");
				b = createElement("b");
				text = createText(text_value);
				text_1 = createText("\r\n\t\t\t\t\t");
				span_1 = createElement("span");
				text_2 = createText(text_2_value);
				text_5 = createText("\r\n\t\t\t");
				br = createElement("br");
				this.h();
			},

			h: function hydrate() {
				b.className = "left";
				setStyle(b, "margin-top", "0 !important");
				span_1.className = "right option-data";
				setStyle(span_1, "margin-top", "0 !important");
				span.className = "dots";
				setStyle(div, "position", "relative");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(span, div);
				appendNode(b, span);
				appendNode(text, b);
				appendNode(text_1, span);
				appendNode(span_1, span);
				appendNode(text_2, span_1);
				insertNode(text_5, target, anchor);
				insertNode(br, target, anchor);
			},

			p: function update(changed, state) {
				option = state.option;
				each_value = state.each_value;
				i = state.i;
				if ((changed.infoOptions) && text_value !== (text_value = option.label)) {
					text.data = text_value;
				}

				if ((changed.infoOptions) && text_2_value !== (text_2_value = option.data ? option.data : 'Нет данных')) {
					text_2.data = text_2_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_5);
				detachNode(br);
			},

			d: noop
		};
	}

	// (105:4) {{#each infoOptions as option, i}}
	function create_each_block_1(component, state) {
		var option = state.option, each_value_1 = state.each_value_1, i = state.i;
		var li, div, i_1, text, text_1_value = option.label, text_1, text_2, div_1, label, text_3, input, input_checked_value, text_4, span;

		return {
			c: function create() {
				li = createElement("li");
				div = createElement("div");
				i_1 = createElement("i");
				text = createText(" ");
				text_1 = createText(text_1_value);
				text_2 = createText("\r\n\t\t\t\t\t\t");
				div_1 = createElement("div");
				label = createElement("label");
				text_3 = createText("Предпросмотр\r\n\t\t\t\t\t\t\t");
				input = createElement("input");
				text_4 = createText("\r\n\t\t\t\t\t\t\t");
				span = createElement("span");
				this.h();
			},

			h: function hydrate() {
				i_1.className = "mdi mdi-menu";
				setAttribute(input, "type", "checkbox");
				input.checked = input_checked_value = option.preview;
				span.className = "lever";
				div_1.className = "switch right";
				div.className = "content";
				setAttribute(li, "index", i);
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(div, li);
				appendNode(i_1, div);
				appendNode(text, div);
				appendNode(text_1, div);
				appendNode(text_2, div);
				appendNode(div_1, div);
				appendNode(label, div_1);
				appendNode(text_3, label);
				appendNode(input, label);
				appendNode(text_4, label);
				appendNode(span, label);
			},

			p: function update(changed, state) {
				option = state.option;
				each_value_1 = state.each_value_1;
				i = state.i;
				if ((changed.infoOptions) && text_1_value !== (text_1_value = option.label)) {
					text_1.data = text_1_value;
				}

				if ((changed.infoOptions) && input_checked_value !== (input_checked_value = option.preview)) {
					input.checked = input_checked_value;
				}
			},

			u: function unmount() {
				detachNode(li);
			},

			d: noop
		};
	}

	// (87:2) {{#if !infoSettings}}
	function create_if_block_1(component, state) {
		var div, h5, text_1, i, text_2;

		function click_handler(event) {
			component.showSettings();
		}

		var each_value = state.infoOptions;

		var each_blocks = [];

		for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
			each_blocks[i_1] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				option: each_value[i_1],
				i: i_1
			}));
		}

		return {
			c: function create() {
				div = createElement("div");
				h5 = createElement("h5");
				h5.textContent = "Информация по заказу";
				text_1 = createText("\r\n\t\t\t");
				i = createElement("i");
				text_2 = createText("\r\n\t\t\t");

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].c();
				}
				this.h();
			},

			h: function hydrate() {
				addListener(i, "click", click_handler);
				i.className = "mdi mdi-settings";
				div.className = "info card";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(h5, div);
				appendNode(text_1, div);
				appendNode(i, div);
				appendNode(text_2, div);

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].m(div, null);
				}
			},

			p: function update(changed, state) {
				var each_value = state.infoOptions;

				if (changed.infoOptions) {
					for (var i_1 = 0; i_1 < each_value.length; i_1 += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							option: each_value[i_1],
							i: i_1
						});

						if (each_blocks[i_1]) {
							each_blocks[i_1].p(changed, each_context);
						} else {
							each_blocks[i_1] = create_each_block(component, each_context);
							each_blocks[i_1].c();
							each_blocks[i_1].m(div, null);
						}
					}

					for (; i_1 < each_blocks.length; i_1 += 1) {
						each_blocks[i_1].u();
						each_blocks[i_1].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].u();
				}
			},

			d: function destroy() {
				removeListener(i, "click", click_handler);

				destroyEach(each_blocks);
			}
		};
	}

	// (101:2) {{else}}
	function create_if_block_2(component, state) {
		var div, ul, label, text_1, button;

		var each_value_1 = state.infoOptions;

		var each_blocks = [];

		for (var i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
			each_blocks[i_1] = create_each_block_1(component, assign(assign({}, state), {
				each_value_1: each_value_1,
				option: each_value_1[i_1],
				i: i_1
			}));
		}

		function click_handler(event) {
			component.saveInfoOptions();
		}

		return {
			c: function create() {
				div = createElement("div");
				ul = createElement("ul");
				label = createElement("label");
				label.textContent = "↓ удерживайте для смены последовательности";

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].c();
				}

				text_1 = createText("\r\n\t\t\t");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-check\"></i>";
				this.h();
			},

			h: function hydrate() {
				label.className = "intro";
				ul.id = "demo1";
				ul.className = "slippylist";
				addListener(button, "click", click_handler);
				button.className = "btn-floating btn-large green waves-effect waves-light right";
				div.className = "card";
				setStyle(div, "padding-bottom", "66px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(ul, div);
				appendNode(label, ul);

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].m(ul, null);
				}

				appendNode(text_1, div);
				appendNode(button, div);
			},

			p: function update(changed, state) {
				var each_value_1 = state.infoOptions;

				if (changed.infoOptions) {
					for (var i_1 = 0; i_1 < each_value_1.length; i_1 += 1) {
						var each_context = assign(assign({}, state), {
							each_value_1: each_value_1,
							option: each_value_1[i_1],
							i: i_1
						});

						if (each_blocks[i_1]) {
							each_blocks[i_1].p(changed, each_context);
						} else {
							each_blocks[i_1] = create_each_block_1(component, each_context);
							each_blocks[i_1].c();
							each_blocks[i_1].m(ul, null);
						}
					}

					for (; i_1 < each_blocks.length; i_1 += 1) {
						each_blocks[i_1].u();
						each_blocks[i_1].d();
					}
					each_blocks.length = each_value_1.length;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i_1 = 0; i_1 < each_blocks.length; i_1 += 1) {
					each_blocks[i_1].u();
				}
			},

			d: function destroy() {
				destroyEach(each_blocks);

				removeListener(button, "click", click_handler);
			}
		};
	}

	// (135:5) {{#each comments as comment}}
	function create_each_block_2(component, state) {
		var comment = state.comment, each_value_2 = state.each_value_2, comment_index = state.comment_index;
		var div;

		var if_block = (state.commentsIsLoad) && create_if_block_3(component, state);

		return {
			c: function create() {
				div = createElement("div");
				if (if_block) if_block.c();
				this.h();
			},

			h: function hydrate() {
				div.className = "comment";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				if (if_block) if_block.m(div, null);
			},

			p: function update(changed, state) {
				comment = state.comment;
				each_value_2 = state.each_value_2;
				comment_index = state.comment_index;
				if (state.commentsIsLoad) {
					if (if_block) {
						if_block.p(changed, state);
					} else {
						if_block = create_if_block_3(component, state);
						if_block.c();
						if_block.m(div, null);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}
			},

			u: function unmount() {
				detachNode(div);
				if (if_block) if_block.u();
			},

			d: function destroy() {
				if (if_block) if_block.d();
			}
		};
	}

	// (137:6) {{#if commentsIsLoad}}
	function create_if_block_3(component, state) {
		var comment = state.comment, each_value_2 = state.each_value_2, comment_index = state.comment_index;
		var label, text_value = comment.user.full_name, text, text_1, span, raw_value = comment.comment ? comment.comment : 'Оставил пустой комментарий', text_2, label_1, text_3_value = comment.created_at, text_3;

		return {
			c: function create() {
				label = createElement("label");
				text = createText(text_value);
				text_1 = createText("\r\n\t\t\t\t\t\t\t");
				span = createElement("span");
				text_2 = createText("\r\n\t\t\t\t\t\t\t");
				label_1 = createElement("label");
				text_3 = createText(text_3_value);
				this.h();
			},

			h: function hydrate() {
				setStyle(label, "position", "absolute");
				setStyle(label, "top", "5px");
				setStyle(label, "left", "10px");
				setStyle(label_1, "position", "absolute");
				setStyle(label_1, "bottom", "5px");
				setStyle(label_1, "right", "10px");
			},

			m: function mount(target, anchor) {
				insertNode(label, target, anchor);
				appendNode(text, label);
				insertNode(text_1, target, anchor);
				insertNode(span, target, anchor);
				span.innerHTML = raw_value;
				insertNode(text_2, target, anchor);
				insertNode(label_1, target, anchor);
				appendNode(text_3, label_1);
			},

			p: function update(changed, state) {
				comment = state.comment;
				each_value_2 = state.each_value_2;
				comment_index = state.comment_index;
				if ((changed.comments) && text_value !== (text_value = comment.user.full_name)) {
					text.data = text_value;
				}

				if ((changed.comments) && raw_value !== (raw_value = comment.comment ? comment.comment : 'Оставил пустой комментарий')) {
					span.innerHTML = raw_value;
				}

				if ((changed.comments) && text_3_value !== (text_3_value = comment.created_at)) {
					text_3.data = text_3_value;
				}
			},

			u: function unmount() {
				span.innerHTML = '';

				detachNode(label);
				detachNode(text_1);
				detachNode(span);
				detachNode(text_2);
				detachNode(label_1);
			},

			d: noop
		};
	}

	// (167:7) {{#each items as item}}
	function create_each_block_3(component, state) {
		var item = state.item, each_value_3 = state.each_value_3, item_index = state.item_index;
		var tr, td, text_value = item.name, text, text_1, td_1, text_2_value = item.price, text_2, text_3, td_2, text_4_value = item.quantity, text_4, text_5, td_3, b, text_6_value = item.sum, text_6;

		return {
			c: function create() {
				tr = createElement("tr");
				td = createElement("td");
				text = createText(text_value);
				text_1 = createText("\r\n\t\t\t\t\t\t\t\t");
				td_1 = createElement("td");
				text_2 = createText(text_2_value);
				text_3 = createText("\r\n\t\t\t\t\t\t\t\t");
				td_2 = createElement("td");
				text_4 = createText(text_4_value);
				text_5 = createText("\r\n\t\t\t\t\t\t\t\t");
				td_3 = createElement("td");
				b = createElement("b");
				text_6 = createText(text_6_value);
			},

			m: function mount(target, anchor) {
				insertNode(tr, target, anchor);
				appendNode(td, tr);
				appendNode(text, td);
				appendNode(text_1, tr);
				appendNode(td_1, tr);
				appendNode(text_2, td_1);
				appendNode(text_3, tr);
				appendNode(td_2, tr);
				appendNode(text_4, td_2);
				appendNode(text_5, tr);
				appendNode(td_3, tr);
				appendNode(b, td_3);
				appendNode(text_6, b);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value_3 = state.each_value_3;
				item_index = state.item_index;
				if ((changed.items) && text_value !== (text_value = item.name)) {
					text.data = text_value;
				}

				if ((changed.items) && text_2_value !== (text_2_value = item.price)) {
					text_2.data = text_2_value;
				}

				if ((changed.items) && text_4_value !== (text_4_value = item.quantity)) {
					text_4.data = text_4_value;
				}

				if ((changed.items) && text_6_value !== (text_6_value = item.sum)) {
					text_6.data = text_6_value;
				}
			},

			u: function unmount() {
				detachNode(tr);
			},

			d: noop
		};
	}

	// (190:6) {{#each files as file}}
	function create_each_block_4(component, state) {
		var file = state.file, each_value_4 = state.each_value_4, file_index = state.file_index;
		var div, i, text, p, text_1_value = file.file.original_name, text_1;

		return {
			c: function create() {
				div = createElement("div");
				i = createElement("i");
				text = createText("\r\n\t\t\t\t\t\t\t");
				p = createElement("p");
				text_1 = createText(text_1_value);
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-file-excel";
				setStyle(i, "position", "relative");
				setStyle(i, "font-size", "90px");
				setStyle(p, "font-size", "22px");
				div.className = "file";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(i, div);
				appendNode(text, div);
				appendNode(p, div);
				appendNode(text_1, p);
			},

			p: function update(changed, state) {
				file = state.file;
				each_value_4 = state.each_value_4;
				file_index = state.file_index;
				if ((changed.files) && text_1_value !== (text_1_value = file.file.original_name)) {
					text_1.data = text_1_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (85:1) {{#if isLoad}}
	function create_if_block(component, state) {
		var div, text, div_1, span, i, text_1, text_2_value = state.comments.length, text_2, text_3, i_1, text_5, div_2, div_3, text_9, div_4, span_1, i_2, text_10, text_11_value = state.items.length, text_11, text_12, i_3, text_14, div_5, div_6, table, thead, text_24, tbody, text_30, div_7, span_2, i_4, text_31, text_32_value = state.files.length, text_32, text_33, i_5, text_35, div_8, div_9, div_10;

		function select_block_type(state) {
			if (!state.infoSettings) return create_if_block_1;
			return create_if_block_2;
		}

		var current_block_type = select_block_type(state);
		var if_block = current_block_type(component, state);

		function click_handler(event) {
			component.showContent(span);
		}

		var each_value_2 = state.comments;

		var each_blocks = [];

		for (var i_6 = 0; i_6 < each_value_2.length; i_6 += 1) {
			each_blocks[i_6] = create_each_block_2(component, assign(assign({}, state), {
				each_value_2: each_value_2,
				comment: each_value_2[i_6],
				comment_index: i_6
			}));
		}

		function click_handler_1(event) {
			component.showContent(span_1);
		}

		var each_value_3 = state.items;

		var each_1_blocks = [];

		for (var i_6 = 0; i_6 < each_value_3.length; i_6 += 1) {
			each_1_blocks[i_6] = create_each_block_3(component, assign(assign({}, state), {
				each_value_3: each_value_3,
				item: each_value_3[i_6],
				item_index: i_6
			}));
		}

		function click_handler_2(event) {
			component.showContent(span_2);
		}

		var each_value_4 = state.files;

		var each_2_blocks = [];

		for (var i_6 = 0; i_6 < each_value_4.length; i_6 += 1) {
			each_2_blocks[i_6] = create_each_block_4(component, assign(assign({}, state), {
				each_value_4: each_value_4,
				file: each_value_4[i_6],
				file_index: i_6
			}));
		}

		function scroll_handler(event) {
			component.insetHeader(div);
		}

		return {
			c: function create() {
				div = createElement("div");
				if_block.c();
				text = createText("\r\n\r\n\t\t");
				div_1 = createElement("div");
				span = createElement("span");
				i = createElement("i");
				text_1 = createText(" \r\n\t\t\t\tКомментарии ");
				text_2 = createText(text_2_value);
				text_3 = createText(" \r\n\t\t\t\t");
				i_1 = createElement("i");
				text_5 = createText("\r\n\r\n\t\t\t");
				div_2 = createElement("div");
				div_3 = createElement("div");

				for (var i_6 = 0; i_6 < each_blocks.length; i_6 += 1) {
					each_blocks[i_6].c();
				}

				text_9 = createText("\r\n\r\n\t\t");
				div_4 = createElement("div");
				span_1 = createElement("span");
				i_2 = createElement("i");
				text_10 = createText(" \r\n\t\t\t\tТовары ");
				text_11 = createText(text_11_value);
				text_12 = createText(" \r\n\t\t\t\t");
				i_3 = createElement("i");
				text_14 = createText("\r\n\r\n\t\t\t");
				div_5 = createElement("div");
				div_6 = createElement("div");
				table = createElement("table");
				thead = createElement("thead");
				thead.innerHTML = "<tr><th>Название</th>\r\n\t\t\t\t\t\t\t\t<th>Цена</th>\r\n\t\t\t\t\t\t\t\t<th>Кол-во</th>\r\n\t\t\t\t\t\t\t\t<th>Общая стоимость</th></tr>";
				text_24 = createText("\r\n\t\t\t\t\t\t");
				tbody = createElement("tbody");

				for (var i_6 = 0; i_6 < each_1_blocks.length; i_6 += 1) {
					each_1_blocks[i_6].c();
				}

				text_30 = createText("\r\n\r\n\t\t");
				div_7 = createElement("div");
				span_2 = createElement("span");
				i_4 = createElement("i");
				text_31 = createText(" \r\n\t\t\t\t\tФайлы ");
				text_32 = createText(text_32_value);
				text_33 = createText("\r\n\t\t\t\t\t");
				i_5 = createElement("i");
				text_35 = createText("\r\n\t\t\t");
				div_8 = createElement("div");
				div_9 = createElement("div");
				div_10 = createElement("div");

				for (var i_6 = 0; i_6 < each_2_blocks.length; i_6 += 1) {
					each_2_blocks[i_6].c();
				}
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-comment-multiple";
				i_1.className = "mdi mdi-chevron-down right";
				addListener(span, "click", click_handler);
				span.className = "card-title";
				div_3.className = "hiden-content";
				div_2.className = "content-to-show";
				div_1.className = "card";
				i_2.className = "mdi mdi-arrow-down-bold-box";
				i_3.className = "mdi mdi-chevron-down right";
				addListener(span_1, "click", click_handler_1);
				span_1.className = "card-title";
				div_6.className = "hiden-content";
				div_5.className = "content-to-show";
				div_4.className = "card";
				i_4.className = "mdi mdi-file";
				i_5.className = "mdi mdi-chevron-down right";
				addListener(span_2, "click", click_handler_2);
				span_2.className = "card-title";
				div_10.className = "horizontal-scroll";
				div_9.className = "hiden-content";
				div_8.className = "content-to-show";
				div_7.className = "card";
				addListener(div, "scroll", scroll_handler);
				div.className = "scroll-content";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				if_block.m(div, null);
				appendNode(text, div);
				appendNode(div_1, div);
				appendNode(span, div_1);
				appendNode(i, span);
				appendNode(text_1, span);
				appendNode(text_2, span);
				appendNode(text_3, span);
				appendNode(i_1, span);
				appendNode(text_5, div_1);
				appendNode(div_2, div_1);
				appendNode(div_3, div_2);

				for (var i_6 = 0; i_6 < each_blocks.length; i_6 += 1) {
					each_blocks[i_6].m(div_3, null);
				}

				appendNode(text_9, div);
				appendNode(div_4, div);
				appendNode(span_1, div_4);
				appendNode(i_2, span_1);
				appendNode(text_10, span_1);
				appendNode(text_11, span_1);
				appendNode(text_12, span_1);
				appendNode(i_3, span_1);
				appendNode(text_14, div_4);
				appendNode(div_5, div_4);
				appendNode(div_6, div_5);
				appendNode(table, div_6);
				appendNode(thead, table);
				appendNode(text_24, table);
				appendNode(tbody, table);

				for (var i_6 = 0; i_6 < each_1_blocks.length; i_6 += 1) {
					each_1_blocks[i_6].m(tbody, null);
				}

				appendNode(text_30, div);
				appendNode(div_7, div);
				appendNode(span_2, div_7);
				appendNode(i_4, span_2);
				appendNode(text_31, span_2);
				appendNode(text_32, span_2);
				appendNode(text_33, span_2);
				appendNode(i_5, span_2);
				appendNode(text_35, div_7);
				appendNode(div_8, div_7);
				appendNode(div_9, div_8);
				appendNode(div_10, div_9);

				for (var i_6 = 0; i_6 < each_2_blocks.length; i_6 += 1) {
					each_2_blocks[i_6].m(div_10, null);
				}
			},

			p: function update(changed, state) {
				if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(div, text);
				}

				if ((changed.comments) && text_2_value !== (text_2_value = state.comments.length)) {
					text_2.data = text_2_value;
				}

				var each_value_2 = state.comments;

				if (changed.commentsIsLoad || changed.comments) {
					for (var i_6 = 0; i_6 < each_value_2.length; i_6 += 1) {
						var each_context = assign(assign({}, state), {
							each_value_2: each_value_2,
							comment: each_value_2[i_6],
							comment_index: i_6
						});

						if (each_blocks[i_6]) {
							each_blocks[i_6].p(changed, each_context);
						} else {
							each_blocks[i_6] = create_each_block_2(component, each_context);
							each_blocks[i_6].c();
							each_blocks[i_6].m(div_3, null);
						}
					}

					for (; i_6 < each_blocks.length; i_6 += 1) {
						each_blocks[i_6].u();
						each_blocks[i_6].d();
					}
					each_blocks.length = each_value_2.length;
				}

				if ((changed.items) && text_11_value !== (text_11_value = state.items.length)) {
					text_11.data = text_11_value;
				}

				var each_value_3 = state.items;

				if (changed.items) {
					for (var i_6 = 0; i_6 < each_value_3.length; i_6 += 1) {
						var each_1_context = assign(assign({}, state), {
							each_value_3: each_value_3,
							item: each_value_3[i_6],
							item_index: i_6
						});

						if (each_1_blocks[i_6]) {
							each_1_blocks[i_6].p(changed, each_1_context);
						} else {
							each_1_blocks[i_6] = create_each_block_3(component, each_1_context);
							each_1_blocks[i_6].c();
							each_1_blocks[i_6].m(tbody, null);
						}
					}

					for (; i_6 < each_1_blocks.length; i_6 += 1) {
						each_1_blocks[i_6].u();
						each_1_blocks[i_6].d();
					}
					each_1_blocks.length = each_value_3.length;
				}

				if ((changed.files) && text_32_value !== (text_32_value = state.files.length)) {
					text_32.data = text_32_value;
				}

				var each_value_4 = state.files;

				if (changed.files) {
					for (var i_6 = 0; i_6 < each_value_4.length; i_6 += 1) {
						var each_2_context = assign(assign({}, state), {
							each_value_4: each_value_4,
							file: each_value_4[i_6],
							file_index: i_6
						});

						if (each_2_blocks[i_6]) {
							each_2_blocks[i_6].p(changed, each_2_context);
						} else {
							each_2_blocks[i_6] = create_each_block_4(component, each_2_context);
							each_2_blocks[i_6].c();
							each_2_blocks[i_6].m(div_10, null);
						}
					}

					for (; i_6 < each_2_blocks.length; i_6 += 1) {
						each_2_blocks[i_6].u();
						each_2_blocks[i_6].d();
					}
					each_2_blocks.length = each_value_4.length;
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();

				for (var i_6 = 0; i_6 < each_blocks.length; i_6 += 1) {
					each_blocks[i_6].u();
				}

				for (var i_6 = 0; i_6 < each_1_blocks.length; i_6 += 1) {
					each_1_blocks[i_6].u();
				}

				for (var i_6 = 0; i_6 < each_2_blocks.length; i_6 += 1) {
					each_2_blocks[i_6].u();
				}
			},

			d: function destroy() {
				if_block.d();
				removeListener(span, "click", click_handler);

				destroyEach(each_blocks);

				removeListener(span_1, "click", click_handler_1);

				destroyEach(each_1_blocks);

				removeListener(span_2, "click", click_handler_2);

				destroyEach(each_2_blocks);

				removeListener(div, "scroll", scroll_handler);
			}
		};
	}

	function ApplicModalComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-c9zlu2-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ApplicModalComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	ApplicModalComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function noop() {}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return ApplicModalComponent;
}());