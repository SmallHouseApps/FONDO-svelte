/* HeaderComponent.html generated by Svelte v1.60.2 */
var HeaderComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1loldv3-style';
		style.textContent = "nav.svelte-1loldv3 form,.svelte-1loldv3 nav form{height:56px}input.svelte-1loldv3:focus,.svelte-1loldv3 input:focus{color:black !important}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, nav, div_1, text_1, text_2, text_3, nav_class_value, text_5;

		function select_block_type_1(state) {
			if (!state.search) return create_if_block;
			return create_if_block_3;
		}

		var current_block_type = select_block_type_1(state);
		var if_block = current_block_type(component, state);

		var if_block_1 = (state.search) && create_if_block_4(component, state);

		var if_block_2 = (state.navCategory) && create_if_block_5(component, state);

		var if_block_3 = (state.loader) && create_if_block_6(component, state);

		var if_block_4 = (state.workShiftNotOpen) && create_if_block_7(component, state);

		return {
			c: function create() {
				div = createElement("div");
				nav = createElement("nav");
				div_1 = createElement("div");
				if_block.c();
				text_1 = createText("\r\n            ");
				if (if_block_1) if_block_1.c();
				text_2 = createText("\r\n            ");
				if (if_block_2) if_block_2.c();
				text_3 = createText("\r\n            ");
				if (if_block_3) if_block_3.c();
				text_5 = createText("\r\n\r\n        ");
				if (if_block_4) if_block_4.c();
				this.h();
			},

			h: function hydrate() {
				div_1.className = "nav-wrapper";
				nav.className = nav_class_value = "nav-extended " + state.color;
				div.id = "HeaderComponent";
				div.className = "svelte-1loldv3";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(nav, div);
				appendNode(div_1, nav);
				if_block.m(div_1, null);
				appendNode(text_1, nav);
				if (if_block_1) if_block_1.m(nav, null);
				appendNode(text_2, nav);
				if (if_block_2) if_block_2.m(nav, null);
				appendNode(text_3, nav);
				if (if_block_3) if_block_3.m(nav, null);
				appendNode(text_5, div);
				if (if_block_4) if_block_4.m(div, null);
			},

			p: function update(changed, state) {
				if (current_block_type === (current_block_type = select_block_type_1(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(div_1, null);
				}

				if (state.search) {
					if (if_block_1) {
						if_block_1.p(changed, state);
					} else {
						if_block_1 = create_if_block_4(component, state);
						if_block_1.c();
						if_block_1.m(nav, text_2);
					}
				} else if (if_block_1) {
					if_block_1.u();
					if_block_1.d();
					if_block_1 = null;
				}

				if (state.navCategory) {
					if (if_block_2) {
						if_block_2.p(changed, state);
					} else {
						if_block_2 = create_if_block_5(component, state);
						if_block_2.c();
						if_block_2.m(nav, text_3);
					}
				} else if (if_block_2) {
					if_block_2.u();
					if_block_2.d();
					if_block_2 = null;
				}

				if (state.loader) {
					if (if_block_3) {
						if_block_3.p(changed, state);
					} else {
						if_block_3 = create_if_block_6(component, state);
						if_block_3.c();
						if_block_3.m(nav, null);
					}
				} else if (if_block_3) {
					if_block_3.u();
					if_block_3.d();
					if_block_3 = null;
				}

				if ((changed.color) && nav_class_value !== (nav_class_value = "nav-extended " + state.color)) {
					nav.className = nav_class_value;
				}

				if (state.workShiftNotOpen) {
					if (!if_block_4) {
						if_block_4 = create_if_block_7(component, state);
						if_block_4.c();
						if_block_4.m(div, null);
					}
				} else if (if_block_4) {
					if_block_4.u();
					if_block_4.d();
					if_block_4 = null;
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();
				if (if_block_1) if_block_1.u();
				if (if_block_2) if_block_2.u();
				if (if_block_3) if_block_3.u();
				if (if_block_4) if_block_4.u();
			},

			d: function destroy() {
				if_block.d();
				if (if_block_1) if_block_1.d();
				if (if_block_2) if_block_2.d();
				if (if_block_3) if_block_3.d();
				if (if_block_4) if_block_4.d();
			}
		};
	}

	// (7:20) {{#if type == 'menu'}}
	function create_if_block_1(component, state) {
		var li;

		return {
			c: function create() {
				li = createElement("li");
				li.innerHTML = "<a href=\"#menu\" class=\"mdi mdi-menu\"></a>";
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
			},

			u: function unmount() {
				detachNode(li);
			},

			d: noop
		};
	}

	// (11:20) {{else}}
	function create_if_block_2(component, state) {
		var li, a;

		function click_handler(event) {
			component.close();
		}

		return {
			c: function create() {
				li = createElement("li");
				a = createElement("a");
				this.h();
			},

			h: function hydrate() {
				addListener(a, "click", click_handler);
				a.className = "mdi mdi-close";
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				appendNode(a, li);
			},

			u: function unmount() {
				detachNode(li);
			},

			d: function destroy() {
				removeListener(a, "click", click_handler);
			}
		};
	}

	// (20:20) {{#each actions as action}}
	function create_each_block(component, state) {
		var action = state.action, each_value = state.each_value, action_index = state.action_index;
		var li, raw_value = action.html;

		return {
			c: function create() {
				li = createElement("li");
			},

			m: function mount(target, anchor) {
				insertNode(li, target, anchor);
				li.innerHTML = raw_value;
			},

			p: function update(changed, state) {
				action = state.action;
				each_value = state.each_value;
				action_index = state.action_index;
				if ((changed.actions) && raw_value !== (raw_value = action.html)) {
					li.innerHTML = raw_value;
				}
			},

			u: function unmount() {
				li.innerHTML = '';

				detachNode(li);
			},

			d: noop
		};
	}

	// (5:16) {{#if !search}}
	function create_if_block(component, state) {
		var ul, text, a, text_1, text_2, ul_1;

		function select_block_type(state) {
			if (state.type == 'menu') return create_if_block_1;
			return create_if_block_2;
		}

		var current_block_type = select_block_type(state);
		var if_block = current_block_type(component, state);

		var each_value = state.actions;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				action: each_value[i],
				action_index: i
			}));
		}

		return {
			c: function create() {
				ul = createElement("ul");
				if_block.c();
				text = createText("\r\n                ");
				a = createElement("a");
				text_1 = createText(state.title);
				text_2 = createText("\r\n\r\n                ");
				ul_1 = createElement("ul");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}
				this.h();
			},

			h: function hydrate() {
				ul.className = "left";
				a.href = state.titleHref;
				a.className = "brand-logo";
				ul_1.className = "right";
			},

			m: function mount(target, anchor) {
				insertNode(ul, target, anchor);
				if_block.m(ul, null);
				insertNode(text, target, anchor);
				insertNode(a, target, anchor);
				appendNode(text_1, a);
				insertNode(text_2, target, anchor);
				insertNode(ul_1, target, anchor);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(ul_1, null);
				}
			},

			p: function update(changed, state) {
				if (current_block_type !== (current_block_type = select_block_type(state))) {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(ul, null);
				}

				if (changed.title) {
					text_1.data = state.title;
				}

				if (changed.titleHref) {
					a.href = state.titleHref;
				}

				var each_value = state.actions;

				if (changed.actions) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							action: each_value[i],
							action_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(ul_1, null);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				detachNode(ul);
				if_block.u();
				detachNode(text);
				detachNode(a);
				detachNode(text_2);
				detachNode(ul_1);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}
			},

			d: function destroy() {
				if_block.d();

				destroyEach(each_blocks);
			}
		};
	}

	// (26:16) {{else}}
	function create_if_block_3(component, state) {
		var form, div, input, input_updating = false, text, label, text_1, i_1;

		function input_input_handler() {
			input_updating = true;
			component.set({ searchText: input.value });
			input_updating = false;
		}

		function click_handler(event) {
			component.set({ search: false, navCategory: true });
		}

		return {
			c: function create() {
				form = createElement("form");
				div = createElement("div");
				input = createElement("input");
				text = createText("\r\n                        ");
				label = createElement("label");
				label.innerHTML = "<i class=\"mdi mdi-magnify material-icons\"></i>";
				text_1 = createText("\r\n                        ");
				i_1 = createElement("i");
				this.h();
			},

			h: function hydrate() {
				addListener(input, "input", input_input_handler);
				setStyle(input, "color", "white");
				input.id = "search";
				setAttribute(input, "type", "search");
				input.required = true;
				input.autofocus = true;
				label.className = "label-icon";
				label.htmlFor = "search";
				addListener(i_1, "click", click_handler);
				i_1.className = "mdi mdi-close material-icons teal-text text-lighten-3";
				div.className = "input-field";
			},

			m: function mount(target, anchor) {
				insertNode(form, target, anchor);
				appendNode(div, form);
				appendNode(input, div);

				input.value = state.searchText;

				appendNode(text, div);
				appendNode(label, div);
				appendNode(text_1, div);
				appendNode(i_1, div);
				input.focus();
			},

			p: function update(changed, state) {
				if (!input_updating) input.value = state.searchText;
			},

			u: function unmount() {
				detachNode(form);
			},

			d: function destroy() {
				removeListener(input, "input", input_input_handler);
				removeListener(i_1, "click", click_handler);
			}
		};
	}

	// (36:12) {{#if search}}
	function create_if_block_4(component, state) {
		var div, i, text, p, label, input, text_1, span, text_4, button;

		function click_handler(event) {
			component.help('search');
		}

		function input_change_handler() {
			component.set({ searchGlobal: input.checked });
		}

		return {
			c: function create() {
				div = createElement("div");
				i = createElement("i");
				text = createText("\r\n                ");
				p = createElement("p");
				label = createElement("label");
				input = createElement("input");
				text_1 = createText("\r\n                        ");
				span = createElement("span");
				span.textContent = "Глобальный поиск";
				text_4 = createText("\r\n                    ");
				button = createElement("button");
				button.textContent = "Искать";
				this.h();
			},

			h: function hydrate() {
				addListener(i, "click", click_handler);
				i.className = "mdi mdi-help-circle left teal-text";
				setStyle(i, "height", "24px");
				setStyle(i, "line-height", "24px");
				addListener(input, "change", input_change_handler);
				setAttribute(input, "type", "checkbox");
				setAttribute(span, "disabled", true);
				button.className = "btn-flat teal-text waves-effect waves-teal";
				setStyle(button, "position", "absolute");
				setStyle(button, "top", "5px");
				setStyle(button, "right", "5px");
				setAttribute(button, "onclick", "window.ctrl.applicList.component.search(window.ctrl.header.get('searchText'), window.ctrl.header.get('searchGlobal'))");
				p.className = "white-text";
				setStyle(p, "margin", "0");
				div.className = "nav-content";
				setStyle(div, "background-color", "white");
				setStyle(div, "padding", "11px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(i, div);
				appendNode(text, div);
				appendNode(p, div);
				appendNode(label, p);
				appendNode(input, label);

				input.checked = state.searchGlobal;

				appendNode(text_1, label);
				appendNode(span, label);
				appendNode(text_4, p);
				appendNode(button, p);
			},

			p: function update(changed, state) {
				input.checked = state.searchGlobal;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(i, "click", click_handler);
				removeListener(input, "change", input_change_handler);
			}
		};
	}

	// (50:12) {{#if navCategory}}
	function create_if_block_5(component, state) {
		var div, div_1, div_2, span, text, b, text_1_value = state.applicsCount.all, text_1, div_2_class_value, text_4, div_3, span_1, text_5, b_1, text_6_value = state.applicsCount.done, text_6, div_3_class_value, text_9, div_4, span_2, text_10, b_2, text_11_value = state.applicsCount.progress, text_11, div_4_class_value, text_14, div_5, span_3, text_15, b_3, text_16_value = state.applicsCount.tk, text_16, div_5_class_value, text_19, div_6, span_4, text_20, b_4, text_21_value = state.applicsCount.dl, text_21, div_6_class_value, text_24, div_7, span_5, text_25, b_5, text_26_value = state.applicsCount.points, text_26, div_7_class_value;

		function click_handler(event) {
			component.chooseCategory('all');
		}

		function click_handler_1(event) {
			component.chooseCategory('done');
		}

		function click_handler_2(event) {
			component.chooseCategory('progress');
		}

		function click_handler_3(event) {
			component.chooseCategory('takeouts');
		}

		function click_handler_4(event) {
			component.chooseCategory('deliverys');
		}

		function click_handler_5(event) {
			component.chooseCategory('points');
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				span = createElement("span");
				text = createText("Все\r\n                            ");
				b = createElement("b");
				text_1 = createText(text_1_value);
				text_4 = createText("\r\n                    ");
				div_3 = createElement("div");
				span_1 = createElement("span");
				text_5 = createText("Завершенные\r\n                            ");
				b_1 = createElement("b");
				text_6 = createText(text_6_value);
				text_9 = createText("\r\n                    ");
				div_4 = createElement("div");
				span_2 = createElement("span");
				text_10 = createText("В обработке\r\n                            ");
				b_2 = createElement("b");
				text_11 = createText(text_11_value);
				text_14 = createText("\r\n                    ");
				div_5 = createElement("div");
				span_3 = createElement("span");
				text_15 = createText("Заборы\r\n                            ");
				b_3 = createElement("b");
				text_16 = createText(text_16_value);
				text_19 = createText("\r\n                    ");
				div_6 = createElement("div");
				span_4 = createElement("span");
				text_20 = createText("Доставки\r\n                            ");
				b_4 = createElement("b");
				text_21 = createText(text_21_value);
				text_24 = createText("\r\n                    ");
				div_7 = createElement("div");
				span_5 = createElement("span");
				text_25 = createText("Точки\r\n                            ");
				b_5 = createElement("b");
				text_26 = createText(text_26_value);
				this.h();
			},

			h: function hydrate() {
				addListener(div_2, "click", click_handler);
				div_2.className = div_2_class_value = "category-tab all-applics " + (state.currentCategory == 'all' ? 'active' : '');
				addListener(div_3, "click", click_handler_1);
				div_3.className = div_3_class_value = "category-tab done-applics " + (state.currentCategory == 'done' ? 'active' : '');
				addListener(div_4, "click", click_handler_2);
				div_4.className = div_4_class_value = "category-tab progress-applics " + (state.currentCategory == 'progress' ? 'active' : '');
				addListener(div_5, "click", click_handler_3);
				div_5.className = div_5_class_value = "category-tab tk-applics " + (state.currentCategory == 'takeouts' ? 'active' : '');
				addListener(div_6, "click", click_handler_4);
				div_6.className = div_6_class_value = "category-tab dl-applics " + (state.currentCategory == 'deliverys' ? 'active' : '');
				addListener(div_7, "click", click_handler_5);
				div_7.className = div_7_class_value = "category-tab points-applics " + (state.currentCategory == 'points' ? 'active' : '');
				div_1.className = "category-tabs";
				setAttribute(div_1, "applicscategorytabs", true);
				div.className = "nav-content";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(div_2, div_1);
				appendNode(span, div_2);
				appendNode(text, span);
				appendNode(b, span);
				appendNode(text_1, b);
				appendNode(text_4, div_1);
				appendNode(div_3, div_1);
				appendNode(span_1, div_3);
				appendNode(text_5, span_1);
				appendNode(b_1, span_1);
				appendNode(text_6, b_1);
				appendNode(text_9, div_1);
				appendNode(div_4, div_1);
				appendNode(span_2, div_4);
				appendNode(text_10, span_2);
				appendNode(b_2, span_2);
				appendNode(text_11, b_2);
				appendNode(text_14, div_1);
				appendNode(div_5, div_1);
				appendNode(span_3, div_5);
				appendNode(text_15, span_3);
				appendNode(b_3, span_3);
				appendNode(text_16, b_3);
				appendNode(text_19, div_1);
				appendNode(div_6, div_1);
				appendNode(span_4, div_6);
				appendNode(text_20, span_4);
				appendNode(b_4, span_4);
				appendNode(text_21, b_4);
				appendNode(text_24, div_1);
				appendNode(div_7, div_1);
				appendNode(span_5, div_7);
				appendNode(text_25, span_5);
				appendNode(b_5, span_5);
				appendNode(text_26, b_5);
			},

			p: function update(changed, state) {
				if ((changed.applicsCount) && text_1_value !== (text_1_value = state.applicsCount.all)) {
					text_1.data = text_1_value;
				}

				if ((changed.currentCategory) && div_2_class_value !== (div_2_class_value = "category-tab all-applics " + (state.currentCategory == 'all' ? 'active' : ''))) {
					div_2.className = div_2_class_value;
				}

				if ((changed.applicsCount) && text_6_value !== (text_6_value = state.applicsCount.done)) {
					text_6.data = text_6_value;
				}

				if ((changed.currentCategory) && div_3_class_value !== (div_3_class_value = "category-tab done-applics " + (state.currentCategory == 'done' ? 'active' : ''))) {
					div_3.className = div_3_class_value;
				}

				if ((changed.applicsCount) && text_11_value !== (text_11_value = state.applicsCount.progress)) {
					text_11.data = text_11_value;
				}

				if ((changed.currentCategory) && div_4_class_value !== (div_4_class_value = "category-tab progress-applics " + (state.currentCategory == 'progress' ? 'active' : ''))) {
					div_4.className = div_4_class_value;
				}

				if ((changed.applicsCount) && text_16_value !== (text_16_value = state.applicsCount.tk)) {
					text_16.data = text_16_value;
				}

				if ((changed.currentCategory) && div_5_class_value !== (div_5_class_value = "category-tab tk-applics " + (state.currentCategory == 'takeouts' ? 'active' : ''))) {
					div_5.className = div_5_class_value;
				}

				if ((changed.applicsCount) && text_21_value !== (text_21_value = state.applicsCount.dl)) {
					text_21.data = text_21_value;
				}

				if ((changed.currentCategory) && div_6_class_value !== (div_6_class_value = "category-tab dl-applics " + (state.currentCategory == 'deliverys' ? 'active' : ''))) {
					div_6.className = div_6_class_value;
				}

				if ((changed.applicsCount) && text_26_value !== (text_26_value = state.applicsCount.points)) {
					text_26.data = text_26_value;
				}

				if ((changed.currentCategory) && div_7_class_value !== (div_7_class_value = "category-tab points-applics " + (state.currentCategory == 'points' ? 'active' : ''))) {
					div_7.className = div_7_class_value;
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(div_2, "click", click_handler);
				removeListener(div_3, "click", click_handler_1);
				removeListener(div_4, "click", click_handler_2);
				removeListener(div_5, "click", click_handler_3);
				removeListener(div_6, "click", click_handler_4);
				removeListener(div_7, "click", click_handler_5);
			}
		};
	}

	// (86:12) {{#if loader}}
	function create_if_block_6(component, state) {
		var div, div_1;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				this.h();
			},

			h: function hydrate() {
				div_1.className = "determinate";
				setStyle(div_1, "width", "" + state.loader + "%");
				div.className = "progress";
				setStyle(div, "margin", "0");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
			},

			p: function update(changed, state) {
				if (changed.loader) {
					setStyle(div_1, "width", "" + state.loader + "%");
				}
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (93:8) {{#if workShiftNotOpen}}
	function create_if_block_7(component, state) {
		var div, button;

		function click_handler(event) {
			component.startWork();
		}

		return {
			c: function create() {
				div = createElement("div");
				button = createElement("button");
				button.textContent = "Открыть рабочую смену";
				this.h();
			},

			h: function hydrate() {
				addListener(button, "click", click_handler);
				button.className = "btn blue btn-large waves-effect waves-light";
				setStyle(button, "border-radius", "50px");
				setStyle(button, "font-size", "1.2em");
				div.className = "center-align";
				setStyle(div, "position", "fixed");
				setStyle(div, "bottom", "15px");
				setStyle(div, "width", "100%");
				setStyle(div, "z-index", "999");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(button, div);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(button, "click", click_handler);
			}
		};
	}

	function HeaderComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-1loldv3-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(HeaderComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	HeaderComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function noop() {}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return HeaderComponent;
}());