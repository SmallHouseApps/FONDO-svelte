/* ItemCardsComponent.html generated by Svelte v1.60.2 */
var ItemCardsComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-5izav4-style';
		style.textContent = ".svelte-5izav4.card-panel,.svelte-5izav4 .card-panel{transform:translate3d(0, 100vh, 0);width:300px;height:350px;display:inline-block;margin:5px;transition:transform 200ms}.svelte-5izav4#ItemsCardsComponent,.svelte-5izav4 #ItemsCardsComponent{display:inline-block;overflow-y:hidden;overflow-x:scroll;white-space:nowrap;padding-left:calc(50% - 150px);padding-right:calc(50% - 150px);position:absolute;top:0;left:0;width:100vw;height:100vh}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, button, text_1, text_2, div_1, div_2, div_3, text_4, div_4, text_5, div_5, h5, h5_class_value, text_8, text_9, div_6, div_7, i_1, text_10, input, input_updating = false, text_11, label, text_14, div_8, i_2, text_15, textarea, textarea_updating = false, text_16, label_1, div_6_class_value, div_1_id_value;

		function click_handler(event) {
			component.close();
		}

		var each_value = state.items;

		var each_blocks = [];

		for (var i_3 = 0; i_3 < each_value.length; i_3 += 1) {
			each_blocks[i_3] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				item: each_value[i_3],
				i: i_3
			}));
		}

		function click_handler_5(event) {
			var state = component.get();
			component.issued(null, state.items.length);
		}

		var if_block = (!state.extra.issued) && create_if_block_4(component, state);

		function input_input_handler() {
			var state = component.get();
			input_updating = true;
			state.extra.weight = toNumber(input.value)
			component.set({ extra: state.extra });
			input_updating = false;
		}

		function textarea_input_handler() {
			var state = component.get();
			textarea_updating = true;
			state.extra.comment = textarea.value
			component.set({ extra: state.extra });
			textarea_updating = false;
		}

		return {
			c: function create() {
				div = createElement("div");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-close black-text\"></i>";
				text_1 = createText("\r\n    ");

				for (var i_3 = 0; i_3 < each_blocks.length; i_3 += 1) {
					each_blocks[i_3].c();
				}

				text_2 = createText("\r\n    ");
				div_1 = createElement("div");
				div_2 = createElement("div");
				div_3 = createElement("div");
				div_3.textContent = "Утвердить";
				text_4 = createText("\r\n            ");
				div_4 = createElement("div");
				text_5 = createText("\r\n            ");
				div_5 = createElement("div");
				h5 = createElement("h5");
				h5.textContent = "Данные к заказу";
				text_8 = createText("\r\n            ");
				if (if_block) if_block.c();
				text_9 = createText("\r\n            ");
				div_6 = createElement("div");
				div_7 = createElement("div");
				i_1 = createElement("i");
				text_10 = createText("\r\n                    ");
				input = createElement("input");
				text_11 = createText("\r\n                    ");
				label = createElement("label");
				label.textContent = "Общий вес";
				text_14 = createText("\r\n                ");
				div_8 = createElement("div");
				i_2 = createElement("i");
				text_15 = createText("\r\n                    ");
				textarea = createElement("textarea");
				text_16 = createText("\r\n                    ");
				label_1 = createElement("label");
				label_1.textContent = "Ваш комментарий";
				this.h();
			},

			h: function hydrate() {
				addListener(button, "click", click_handler);
				button.id = "close";
				button.className = "btn-floating white waves-effect waves-light right";
				setStyle(button, "position", "fixed");
				setStyle(button, "top", "15px");
				setStyle(button, "right", "15px");
				addListener(div_3, "click", click_handler_5);
				div_3.className = "green white-text";
				setStyle(div_3, "position", "absolute");
				setStyle(div_3, "bottom", "0");
				setStyle(div_3, "right", "0");
				setStyle(div_3, "width", "100%");
				setStyle(div_3, "height", "50px");
				setStyle(div_3, "text-align", "center");
				setStyle(div_3, "line-height", "50px");
				setStyle(div_3, "z-index", "5");
				div_4.id = "extra-item-cover-issued";
				div_4.className = "green";
				setStyle(div_4, "position", "absolute");
				setStyle(div_4, "z-index", "2");
				setStyle(div_4, "height", "0px");
				setStyle(div_4, "width", "0");
				setStyle(div_4, "bottom", "0");
				setStyle(div_4, "right", "0");
				setStyle(div_4, "border-radius", "1000px 0 0 0");
				setStyle(div_4, "overflow", "hidden");
				setStyle(h5, "margin", "0");
				h5.className = h5_class_value = state.extra.issued ? 'white-text' : '';
				setStyle(div_5, "padding", "15px");
				i_1.className = "mdi mdi-weight-kilogram prefix";
				addListener(input, "input", input_input_handler);
				input.id = "icon_prefix";
				setAttribute(input, "type", "number");
				label.className = "active";
				label.htmlFor = "icon_prefix";
				div_7.className = "input-field col s12";
				i_2.className = "mdi mdi-message prefix";
				addListener(textarea, "input", textarea_input_handler);
				textarea.id = "icon_prefix2";
				textarea.className = "materialize-textarea";
				label_1.className = "active";
				label_1.htmlFor = "icon_prefix2";
				div_8.className = "input-field col s12";
				div_6.className = div_6_class_value = "row " + (state.extra.issued ? 'white-inputs' : '');
				setStyle(div_6, "padding", "15px");
				setStyle(div_2, "position", "absolute");
				setStyle(div_2, "height", "100%");
				setStyle(div_2, "width", "100%");
				div_1.id = div_1_id_value = "card" + state.items.length;
				div_1.className = "card-panel";
				setStyle(div_1, "padding", "0");
				setStyle(div_1, "white-space", "normal");
				div.id = "ItemsCardsComponent";
				div.className = "svelte-5izav4";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(button, div);
				appendNode(text_1, div);

				for (var i_3 = 0; i_3 < each_blocks.length; i_3 += 1) {
					each_blocks[i_3].m(div, null);
				}

				appendNode(text_2, div);
				appendNode(div_1, div);
				appendNode(div_2, div_1);
				appendNode(div_3, div_2);
				appendNode(text_4, div_2);
				appendNode(div_4, div_2);
				appendNode(text_5, div_2);
				appendNode(div_5, div_2);
				appendNode(h5, div_5);
				appendNode(text_8, div_2);
				if (if_block) if_block.m(div_2, null);
				appendNode(text_9, div_2);
				appendNode(div_6, div_2);
				appendNode(div_7, div_6);
				appendNode(i_1, div_7);
				appendNode(text_10, div_7);
				appendNode(input, div_7);

				input.value = state.extra.weight;

				appendNode(text_11, div_7);
				appendNode(label, div_7);
				appendNode(text_14, div_6);
				appendNode(div_8, div_6);
				appendNode(i_2, div_8);
				appendNode(text_15, div_8);
				appendNode(textarea, div_8);

				textarea.value = state.extra.comment;

				appendNode(text_16, div_8);
				appendNode(label_1, div_8);
			},

			p: function update(changed, state) {
				var each_value = state.items;

				if (changed.items || changed.startState) {
					for (var i_3 = 0; i_3 < each_value.length; i_3 += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							item: each_value[i_3],
							i: i_3
						});

						if (each_blocks[i_3]) {
							each_blocks[i_3].p(changed, each_context);
						} else {
							each_blocks[i_3] = create_each_block(component, each_context);
							each_blocks[i_3].c();
							each_blocks[i_3].m(div, text_2);
						}
					}

					for (; i_3 < each_blocks.length; i_3 += 1) {
						each_blocks[i_3].u();
						each_blocks[i_3].d();
					}
					each_blocks.length = each_value.length;
				}

				if ((changed.extra) && h5_class_value !== (h5_class_value = state.extra.issued ? 'white-text' : '')) {
					h5.className = h5_class_value;
				}

				if (!state.extra.issued) {
					if (!if_block) {
						if_block = create_if_block_4(component, state);
						if_block.c();
						if_block.m(div_2, text_9);
					}
				} else if (if_block) {
					if_block.u();
					if_block.d();
					if_block = null;
				}

				if (!input_updating) input.value = state.extra.weight;
				if (!textarea_updating) textarea.value = state.extra.comment;
				if ((changed.extra) && div_6_class_value !== (div_6_class_value = "row " + (state.extra.issued ? 'white-inputs' : ''))) {
					div_6.className = div_6_class_value;
				}

				if ((changed.items) && div_1_id_value !== (div_1_id_value = "card" + state.items.length)) {
					div_1.id = div_1_id_value;
				}
			},

			u: function unmount() {
				detachNode(div);

				for (var i_3 = 0; i_3 < each_blocks.length; i_3 += 1) {
					each_blocks[i_3].u();
				}

				if (if_block) if_block.u();
			},

			d: function destroy() {
				removeListener(button, "click", click_handler);

				destroyEach(each_blocks);

				removeListener(div_3, "click", click_handler_5);
				if (if_block) if_block.d();
				removeListener(input, "input", input_input_handler);
				removeListener(textarea, "input", textarea_input_handler);
			}
		};
	}

	// (5:4) {{#each items as item, i}}
	function create_each_block(component, state) {
		var item = state.item, each_value = state.each_value, i = state.i;
		var div, div_1, div_2, text_1, div_3, text_3, div_4, h6, text_4_value = item.name, text_4, h6_class_value, text_6, div_id_value;

		function select_block_type(state) {
			if (typeof(item.issued) == 'undefined' || state.startState) return create_if_block;
			if (!item.issued) return create_if_block_1;
			if (item.quantity > 1) return create_if_block_2;
			return create_if_block_3;
		}

		var current_block_type = select_block_type(state);
		var if_block = current_block_type(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				div_2.textContent = "Не выдан";
				text_1 = createText("\r\n            ");
				div_3 = createElement("div");
				div_3.textContent = "Выдан";
				text_3 = createText("\r\n            ");
				div_4 = createElement("div");
				h6 = createElement("h6");
				text_4 = createText(text_4_value);
				text_6 = createText("\r\n            ");
				if_block.c();
				this.h();
			},

			h: function hydrate() {
				addListener(div_2, "click", click_handler);
				div_2.className = "white red-text waves-effect waves-red";
				setStyle(div_2, "position", "absolute");
				setStyle(div_2, "bottom", "0");
				setStyle(div_2, "left", "0");
				setStyle(div_2, "width", "50%");
				setStyle(div_2, "height", "50px");
				setStyle(div_2, "text-align", "center");
				setStyle(div_2, "line-height", "50px");
				setStyle(div_2, "z-index", "5");
				setStyle(div_2, "font-size", "20px");

				div_2._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				addListener(div_3, "click", click_handler_1);
				div_3.className = "white green-text waves-effect waves-green";
				setStyle(div_3, "position", "absolute");
				setStyle(div_3, "bottom", "0");
				setStyle(div_3, "right", "0");
				setStyle(div_3, "width", "50%");
				setStyle(div_3, "height", "50px");
				setStyle(div_3, "text-align", "center");
				setStyle(div_3, "line-height", "50px");
				setStyle(div_3, "z-index", "5");
				setStyle(div_3, "font-size", "20px");

				div_3._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				setStyle(h6, "margin", "0");
				h6.className = h6_class_value = typeof(item.issued) == 'undefined' || state.startState ? '' : 'white-text';
				setStyle(div_4, "padding", "10px");
				setStyle(div_4, "height", "75px");
				setStyle(div_1, "position", "absolute");
				setStyle(div_1, "height", "100%");
				setStyle(div_1, "width", "100%");
				div.id = div_id_value = "card" + i;
				div.className = "card-panel";
				setStyle(div, "padding", "0");
				setStyle(div, "white-space", "normal");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(div_2, div_1);
				appendNode(text_1, div_1);
				appendNode(div_3, div_1);
				appendNode(text_3, div_1);
				appendNode(div_4, div_1);
				appendNode(h6, div_4);
				appendNode(text_4, h6);
				appendNode(text_6, div_1);
				if_block.m(div_1, null);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value = state.each_value;
				i = state.i;
				div_2._svelte.each_value = state.each_value;
				div_2._svelte.i = state.i;

				div_3._svelte.each_value = state.each_value;
				div_3._svelte.i = state.i;

				if ((changed.items) && text_4_value !== (text_4_value = item.name)) {
					text_4.data = text_4_value;
				}

				if ((changed.items || changed.startState) && h6_class_value !== (h6_class_value = typeof(item.issued) == 'undefined' || state.startState ? '' : 'white-text')) {
					h6.className = h6_class_value;
				}

				if (current_block_type === (current_block_type = select_block_type(state)) && if_block) {
					if_block.p(changed, state);
				} else {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(div_1, null);
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();
			},

			d: function destroy() {
				removeListener(div_2, "click", click_handler);
				removeListener(div_3, "click", click_handler_1);
				if_block.d();
			}
		};
	}

	// (16:12) {{#if typeof(item.issued) == 'undefined' || startState}}
	function create_if_block(component, state) {
		var item = state.item, each_value = state.each_value, i = state.i;
		var div, text_7, div_4, span, b, text_8_value = item.quantity, text_8, text_9, text_10, span_1, b_1, text_11_value = item.sum, text_11, text_12;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<img class=\"materialboxed\" src=\"img/cargo.png\" style=\"width: 150px; margin-left: 25px;\">\r\n                <div style=\"width: 50px; border-top: 1px solid grey; transform: rotate(25deg); position: relative; top: -16px; left: 42px; text-align: center;\">110см</div>\r\n                <div style=\"width: 50px; border-top: 1px solid grey; transform: rotate(-26deg); position: relative; top: -39px; left: 109px; text-align: center;\">67см</div>\r\n                <div style=\"height: 65px; width: 42px; border-left: 1px solid grey; position: relative; top: -147px; left: 159px; text-align: center; line-height: 100px\">67см</div>";
				text_7 = createText("\r\n            ");
				div_4 = createElement("div");
				span = createElement("span");
				b = createElement("b");
				text_8 = createText(text_8_value);
				text_9 = createText("шт");
				text_10 = createText("\r\n                ");
				span_1 = createElement("span");
				b_1 = createElement("b");
				text_11 = createText(text_11_value);
				text_12 = createText("₽");
				this.h();
			},

			h: function hydrate() {
				span.className = "left";
				setStyle(span, "font-size", "25px");
				setStyle(span, "margin-top", "35px");
				span_1.className = "red-text right";
				setStyle(span_1, "font-size", "25px");
				setStyle(span_1, "margin-top", "35px");
				setStyle(div_4, "position", "absolute");
				setStyle(div_4, "bottom", "70px");
				setStyle(div_4, "left", "25px");
				setStyle(div_4, "width", "85%");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				insertNode(text_7, target, anchor);
				insertNode(div_4, target, anchor);
				appendNode(span, div_4);
				appendNode(b, span);
				appendNode(text_8, b);
				appendNode(text_9, span);
				appendNode(text_10, div_4);
				appendNode(span_1, div_4);
				appendNode(b_1, span_1);
				appendNode(text_11, b_1);
				appendNode(text_12, span_1);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value = state.each_value;
				i = state.i;
				if ((changed.items) && text_8_value !== (text_8_value = item.quantity)) {
					text_8.data = text_8_value;
				}

				if ((changed.items) && text_11_value !== (text_11_value = item.sum)) {
					text_11.data = text_11_value;
				}
			},

			u: function unmount() {
				detachNode(div);
				detachNode(text_7);
				detachNode(div_4);
			},

			d: noop
		};
	}

	// (31:35) 
	function create_if_block_1(component, state) {
		var item = state.item, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<i class=\"mdi mdi-close-circle white-text\" style=\"font-size: 58px;\"></i>\r\n                <p class=\"white-text\" style=\"font-size: 28px; margin: 0; margin-top: -20px;\">Не выдан</p>";
				this.h();
			},

			h: function hydrate() {
				div.className = "center-align";
				setStyle(div, "padding-top", "30px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (36:40) 
	function create_if_block_2(component, state) {
		var item = state.item, each_value = state.each_value, i = state.i;
		var div, p, text_1, div_1, button, text_3, span, text_4_value = item.issuedPartQuantity, text_4, text_5, text_6, button_1, text_9, button_2;

		return {
			c: function create() {
				div = createElement("div");
				p = createElement("p");
				p.textContent = "Выданo";
				text_1 = createText("\r\n                ");
				div_1 = createElement("div");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-minus black-text\"></i>";
				text_3 = createText("\r\n                    ");
				span = createElement("span");
				text_4 = createText(text_4_value);
				text_5 = createText("шт");
				text_6 = createText("\r\n                    ");
				button_1 = createElement("button");
				button_1.innerHTML = "<i class=\"mdi mdi-plus black-text\"></i>";
				text_9 = createText("\r\n                ");
				button_2 = createElement("button");
				button_2.textContent = "Подтвердить";
				this.h();
			},

			h: function hydrate() {
				p.className = "white-text";
				setStyle(p, "font-size", "28px");
				setStyle(p, "margin", "0");
				setStyle(p, "margin-top", "-20px");
				addListener(button, "click", click_handler_2);
				button.className = "btn-floating waves-effect waves-red white left";

				button._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				span.className = "white-text";
				setStyle(span, "font-size", "40px");
				addListener(button_1, "click", click_handler_3);
				button_1.className = "btn-floating waves-effect waves-green white right";

				button_1._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				div_1.className = "text-center";
				setStyle(div_1, "width", "70%");
				setStyle(div_1, "margin", "10px auto");
				setStyle(div_1, "line-height", "1");
				addListener(button_2, "click", click_handler_4);
				button_2.className = "btn waves-effect waves-teal white black-text";
				setStyle(button_2, "margin-top", "25px");

				button_2._svelte = {
					component: component,
					each_value: state.each_value,
					i: state.i
				};

				div.className = "center-align";
				setStyle(div, "padding-top", "30px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(p, div);
				appendNode(text_1, div);
				appendNode(div_1, div);
				appendNode(button, div_1);
				appendNode(text_3, div_1);
				appendNode(span, div_1);
				appendNode(text_4, span);
				appendNode(text_5, span);
				appendNode(text_6, div_1);
				appendNode(button_1, div_1);
				appendNode(text_9, div);
				appendNode(button_2, div);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value = state.each_value;
				i = state.i;
				button._svelte.each_value = state.each_value;
				button._svelte.i = state.i;

				if ((changed.items) && text_4_value !== (text_4_value = item.issuedPartQuantity)) {
					text_4.data = text_4_value;
				}

				button_1._svelte.each_value = state.each_value;
				button_1._svelte.i = state.i;

				button_2._svelte.each_value = state.each_value;
				button_2._svelte.i = state.i;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(button, "click", click_handler_2);
				removeListener(button_1, "click", click_handler_3);
				removeListener(button_2, "click", click_handler_4);
			}
		};
	}

	// (50:12) {{else}}
	function create_if_block_3(component, state) {
		var item = state.item, each_value = state.each_value, i = state.i;
		var div;

		return {
			c: function create() {
				div = createElement("div");
				div.innerHTML = "<i class=\"mdi mdi-check-circle white-text\" style=\"font-size: 58px;\"></i>\r\n                <p class=\"white-text\" style=\"font-size: 28px; margin: 0; margin-top: -20px;\">Выдан</p>";
				this.h();
			},

			h: function hydrate() {
				div.className = "center-align";
				setStyle(div, "padding-top", "30px");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			p: function update(changed, state) {
				item = state.item;
				each_value = state.each_value;
				i = state.i;

			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	// (70:12) {{#if !extra.issued}}
	function create_if_block_4(component, state) {
		var div;

		return {
			c: function create() {
				div = createElement("div");
				this.h();
			},

			h: function hydrate() {
				div.className = "divider";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
			},

			u: function unmount() {
				detachNode(div);
			},

			d: noop
		};
	}

	function click_handler(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, item = each_value[i];
		component.notIssued(item.id, i);
	}

	function click_handler_1(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, item = each_value[i];
		component.issued(item.id, i);
	}

	function click_handler_2(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, item = each_value[i];
		component.issuedPartQuantityChange(item.id, 'minus');
	}

	function click_handler_3(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, item = each_value[i];
		component.issuedPartQuantityChange(item.id, 'plus');
	}

	function click_handler_4(event) {
		var component = this._svelte.component;
		var each_value = this._svelte.each_value, i = this._svelte.i, item = each_value[i];
		component.issued(item.id, i);
	}

	function ItemCardsComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-5izav4-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(ItemCardsComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	ItemCardsComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function toNumber(value) {
		return value === '' ? undefined : +value;
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function noop() {}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return ItemCardsComponent;
}());