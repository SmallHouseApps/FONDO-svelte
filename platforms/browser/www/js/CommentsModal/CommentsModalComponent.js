/* CommentsModalComponent.html generated by Svelte v1.60.2 */
var CommentsModalComponent = (function() { "use strict";

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-1izd5zl-style';
		style.textContent = ".svelte-1izd5zl.comment,.svelte-1izd5zl .comment{transform:translate3d(0, 100vh, 0);transition:transform 300ms\r\n    }.svelte-1izd5zl#head-sticky,.svelte-1izd5zl #head-sticky{transform:translate3d(0, -200px, 0);transition:transform 200ms}.svelte-1izd5zl.comment-add,.svelte-1izd5zl .comment-add{transform:translate3d(0, 100vh, 0);transition:transform 200ms}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, state) {
		var div, div_1, text, button, text_3, div_2, text_5;

		function select_block_type(state) {
			if (state.comments.length > 0) return create_if_block;
			return create_if_block_1;
		}

		var current_block_type = select_block_type(state);
		var if_block = current_block_type(component, state);

		function click_handler(event) {
			component.close();
		}

		function select_block_type_1(state) {
			if (state.comments.length > 0) return create_if_block_2;
			return create_if_block_3;
		}

		var current_block_type_1 = select_block_type_1(state);
		var if_block_1 = current_block_type_1(component, state);

		function select_block_type_2(state) {
			if (state.addComment) return create_if_block_4;
			if (state.addFile) return create_if_block_5;
			return create_if_block_6;
		}

		var current_block_type_2 = select_block_type_2(state);
		var if_block_2 = current_block_type_2(component, state);

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				if_block.c();
				text = createText("\r\n        ");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-close black-text\"></i>";
				text_3 = createText("\r\n    ");
				div_2 = createElement("div");
				if_block_1.c();
				text_5 = createText("\r\n    ");
				if_block_2.c();
				this.h();
			},

			h: function hydrate() {
				addListener(button, "click", click_handler);
				button.id = "close";
				button.className = "btn-floating white waves-effect waves-light right";
				div_1.id = "head-sticky";
				setStyle(div_1, "position", "absolute");
				setStyle(div_1, "top", "15px");
				setStyle(div_1, "right", "15px");
				setStyle(div_1, "left", "15px");
				div_2.className = "row";
				div.id = "CommentsModalComponent";
				setStyle(div, "overflow-y", "auto");
				setStyle(div, "height", "90vh");
				div.className = "svelte-1izd5zl";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				if_block.m(div_1, null);
				appendNode(text, div_1);
				appendNode(button, div_1);
				appendNode(text_3, div);
				appendNode(div_2, div);
				if_block_1.m(div_2, null);
				appendNode(text_5, div);
				if_block_2.m(div, null);
			},

			p: function update(changed, state) {
				if (current_block_type !== (current_block_type = select_block_type(state))) {
					if_block.u();
					if_block.d();
					if_block = current_block_type(component, state);
					if_block.c();
					if_block.m(div_1, text);
				}

				if (current_block_type_1 === (current_block_type_1 = select_block_type_1(state)) && if_block_1) {
					if_block_1.p(changed, state);
				} else {
					if_block_1.u();
					if_block_1.d();
					if_block_1 = current_block_type_1(component, state);
					if_block_1.c();
					if_block_1.m(div_2, null);
				}

				if (current_block_type_2 === (current_block_type_2 = select_block_type_2(state)) && if_block_2) {
					if_block_2.p(changed, state);
				} else {
					if_block_2.u();
					if_block_2.d();
					if_block_2 = current_block_type_2(component, state);
					if_block_2.c();
					if_block_2.m(div, null);
				}
			},

			u: function unmount() {
				detachNode(div);
				if_block.u();
				if_block_1.u();
				if_block_2.u();
			},

			d: function destroy() {
				if_block.d();
				removeListener(button, "click", click_handler);
				if_block_1.d();
				if_block_2.d();
			}
		};
	}

	// (3:8) {{#if comments.length > 0}}
	function create_if_block(component, state) {
		var h4;

		return {
			c: function create() {
				h4 = createElement("h4");
				h4.textContent = "Комментарии";
				this.h();
			},

			h: function hydrate() {
				h4.className = "white-text left";
				setStyle(h4, "margin", "5px");
			},

			m: function mount(target, anchor) {
				insertNode(h4, target, anchor);
			},

			u: function unmount() {
				detachNode(h4);
			},

			d: noop
		};
	}

	// (5:8) {{else}}
	function create_if_block_1(component, state) {
		var h4;

		return {
			c: function create() {
				h4 = createElement("h4");
				h4.textContent = "Файлы";
				this.h();
			},

			h: function hydrate() {
				h4.className = "white-text left";
				setStyle(h4, "margin", "5px");
			},

			m: function mount(target, anchor) {
				insertNode(h4, target, anchor);
			},

			u: function unmount() {
				detachNode(h4);
			},

			d: noop
		};
	}

	// (14:12) {{#each comments as comment}}
	function create_each_block(component, state) {
		var comment = state.comment, each_value = state.each_value, comment_index = state.comment_index;
		var div, div_1, label, text_value = comment.user.full_name, text, text_1, span, raw_value = comment.comment ? comment.comment : 'Оставил пустой комментарий', text_2, label_1, text_3_value = comment.created_at, text_3;

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				label = createElement("label");
				text = createText(text_value);
				text_1 = createText("\r\n                        ");
				span = createElement("span");
				text_2 = createText("\r\n                        ");
				label_1 = createElement("label");
				text_3 = createText(text_3_value);
				this.h();
			},

			h: function hydrate() {
				setStyle(label, "position", "absolute");
				setStyle(label, "top", "5px");
				setStyle(label, "left", "10px");
				setStyle(label_1, "position", "absolute");
				setStyle(label_1, "bottom", "5px");
				setStyle(label_1, "right", "5px");
				div_1.className = "card-panel";
				setStyle(div_1, "position", "relative");
				div.className = "col s12 comment";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(label, div_1);
				appendNode(text, label);
				appendNode(text_1, div_1);
				appendNode(span, div_1);
				span.innerHTML = raw_value;
				appendNode(text_2, div_1);
				appendNode(label_1, div_1);
				appendNode(text_3, label_1);
			},

			p: function update(changed, state) {
				comment = state.comment;
				each_value = state.each_value;
				comment_index = state.comment_index;
				if ((changed.comments) && text_value !== (text_value = comment.user.full_name)) {
					text.data = text_value;
				}

				if ((changed.comments) && raw_value !== (raw_value = comment.comment ? comment.comment : 'Оставил пустой комментарий')) {
					span.innerHTML = raw_value;
				}

				if ((changed.comments) && text_3_value !== (text_3_value = comment.created_at)) {
					text_3.data = text_3_value;
				}
			},

			u: function unmount() {
				span.innerHTML = '';

				detachNode(div);
			},

			d: noop
		};
	}

	// (24:12) {{#each files as file}}
	function create_each_block_1(component, state) {
		var file = state.file, each_value_1 = state.each_value_1, file_index = state.file_index;
		var div, i, text, span, text_1_value = file.file.original_name, text_1;

		return {
			c: function create() {
				div = createElement("div");
				i = createElement("i");
				text = createText("\r\n                    ");
				span = createElement("span");
				text_1 = createText(text_1_value);
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-file-excel white-text";
				setStyle(i, "position", "relative");
				setStyle(i, "font-size", "100px");
				span.className = "white-text";
				setStyle(span, "font-size", "26px");
				setStyle(span, "word-wrap", "break-word");
				addListener(div, "click", click_handler);
				div.className = "col s4 file center-align";
				setStyle(div, "transform", "translate3d(100vw, 30px, 0)");
				setStyle(div, "line-height", "35px");
				setStyle(div, "transition", "transform 300ms");

				div._svelte = {
					component: component,
					each_value_1: state.each_value_1,
					file_index: state.file_index
				};
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(i, div);
				appendNode(text, div);
				appendNode(span, div);
				appendNode(text_1, span);
			},

			p: function update(changed, state) {
				file = state.file;
				each_value_1 = state.each_value_1;
				file_index = state.file_index;
				if ((changed.files) && text_1_value !== (text_1_value = file.file.original_name)) {
					text_1.data = text_1_value;
				}

				div._svelte.each_value_1 = state.each_value_1;
				div._svelte.file_index = state.file_index;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(div, "click", click_handler);
			}
		};
	}

	// (13:8) {{#if comments.length > 0}}
	function create_if_block_2(component, state) {
		var each_anchor;

		var each_value = state.comments;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, assign(assign({}, state), {
				each_value: each_value,
				comment: each_value[i],
				comment_index: i
			}));
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var each_value = state.comments;

				if (changed.comments) {
					for (var i = 0; i < each_value.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value: each_value,
							comment: each_value[i],
							comment_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (23:8) {{else}}
	function create_if_block_3(component, state) {
		var each_anchor;

		var each_value_1 = state.files;

		var each_blocks = [];

		for (var i = 0; i < each_value_1.length; i += 1) {
			each_blocks[i] = create_each_block_1(component, assign(assign({}, state), {
				each_value_1: each_value_1,
				file: each_value_1[i],
				file_index: i
			}));
		}

		return {
			c: function create() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				each_anchor = createComment();
			},

			m: function mount(target, anchor) {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(target, anchor);
				}

				insertNode(each_anchor, target, anchor);
			},

			p: function update(changed, state) {
				var each_value_1 = state.files;

				if (changed.files) {
					for (var i = 0; i < each_value_1.length; i += 1) {
						var each_context = assign(assign({}, state), {
							each_value_1: each_value_1,
							file: each_value_1[i],
							file_index: i
						});

						if (each_blocks[i]) {
							each_blocks[i].p(changed, each_context);
						} else {
							each_blocks[i] = create_each_block_1(component, each_context);
							each_blocks[i].c();
							each_blocks[i].m(each_anchor.parentNode, each_anchor);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].u();
						each_blocks[i].d();
					}
					each_blocks.length = each_value_1.length;
				}
			},

			u: function unmount() {
				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].u();
				}

				detachNode(each_anchor);
			},

			d: function destroy() {
				destroyEach(each_blocks);
			}
		};
	}

	// (32:4) {{#if addComment}}
	function create_if_block_4(component, state) {
		var div, div_1, div_2, i, text, textarea, textarea_updating = false, text_1, label, text_4, button;

		function textarea_input_handler() {
			textarea_updating = true;
			component.set({ newComment: textarea.value });
			textarea_updating = false;
		}

		function click_handler_1(event) {
			component.add('comment');
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				div_2 = createElement("div");
				i = createElement("i");
				text = createText("\r\n                    ");
				textarea = createElement("textarea");
				text_1 = createText("\r\n                    ");
				label = createElement("label");
				label.textContent = "Ваше сообщение";
				text_4 = createText("\r\n                ");
				button = createElement("button");
				button.textContent = "Готово";
				this.h();
			},

			h: function hydrate() {
				i.className = "mdi mdi-pencil prefix";
				addListener(textarea, "input", textarea_input_handler);
				textarea.id = "new-comment";
				textarea.className = "materialize-textarea";
				textarea.autofocus = true;
				label.htmlFor = "new-comment";
				div_2.className = "input-field col s12";
				addListener(button, "click", click_handler_1);
				button.className = "btn-flat green-text";
				setStyle(button, "position", "absolute");
				setStyle(button, "bottom", "5px");
				setStyle(button, "right", "5px");
				div_1.className = "row";
				div.className = "card-panel comment-add";
				setStyle(div, "position", "fixed");
				setStyle(div, "bottom", "0");
				setStyle(div, "width", "100%");
				setStyle(div, "margin", "0");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(div_2, div_1);
				appendNode(i, div_2);
				appendNode(text, div_2);
				appendNode(textarea, div_2);

				textarea.value = state.newComment;

				appendNode(text_1, div_2);
				appendNode(label, div_2);
				appendNode(text_4, div_1);
				appendNode(button, div_1);
				textarea.focus();
			},

			p: function update(changed, state) {
				if (!textarea_updating) textarea.value = state.newComment;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(textarea, "input", textarea_input_handler);
				removeListener(button, "click", click_handler_1);
			}
		};
	}

	// (43:22) 
	function create_if_block_5(component, state) {
		var div, div_1, form, div_2, span, text_1, input, text_2, input_1, input_1_updating = false, text_4, div_3, text_7, button;

		function input_1_input_handler() {
			input_1_updating = true;
			component.set({ applicId: toNumber(input_1.value) });
			input_1_updating = false;
		}

		function click_handler_1(event) {
			component.add('file');
		}

		return {
			c: function create() {
				div = createElement("div");
				div_1 = createElement("div");
				form = createElement("form");
				div_2 = createElement("div");
				span = createElement("span");
				span.textContent = "Файл";
				text_1 = createText("\r\n                  ");
				input = createElement("input");
				text_2 = createText("\r\n                  ");
				input_1 = createElement("input");
				text_4 = createText("\r\n                ");
				div_3 = createElement("div");
				div_3.innerHTML = "<input class=\"file-path validate\" type=\"text\">";
				text_7 = createText("\r\n            ");
				button = createElement("button");
				button.textContent = "Готово";
				this.h();
			},

			h: function hydrate() {
				setAttribute(input, "type", "file");
				input.name = "file";
				addListener(input_1, "input", input_1_input_handler);
				input_1.className = "hide";
				setAttribute(input_1, "type", "number");
				input_1.name = "applic_id";
				div_2.className = "btn";
				div_3.className = "file-path-wrapper";
				form.className = "file-field input-field col s12";
				form.id = "file-form";
				addListener(button, "click", click_handler_1);
				button.className = "btn-flat green-text";
				setStyle(button, "position", "absolute");
				setStyle(button, "bottom", "5px");
				setStyle(button, "right", "5px");
				div_1.className = "row";
				div.className = "card-panel file-add";
				setStyle(div, "position", "fixed");
				setStyle(div, "bottom", "0");
				setStyle(div, "width", "100%");
				setStyle(div, "margin", "0");
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(form, div_1);
				appendNode(div_2, form);
				appendNode(span, div_2);
				appendNode(text_1, div_2);
				appendNode(input, div_2);
				appendNode(text_2, div_2);
				appendNode(input_1, div_2);

				input_1.value = state.applicId;

				appendNode(text_4, form);
				appendNode(div_3, form);
				appendNode(text_7, div_1);
				appendNode(button, div_1);
			},

			p: function update(changed, state) {
				if (!input_1_updating) input_1.value = state.applicId;
			},

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(input_1, "input", input_1_input_handler);
				removeListener(button, "click", click_handler_1);
			}
		};
	}

	// (59:4) {{else}}
	function create_if_block_6(component, state) {
		var div, button;

		function click_handler_1(event) {
			component.add();
		}

		return {
			c: function create() {
				div = createElement("div");
				button = createElement("button");
				button.innerHTML = "<i class=\"mdi mdi-plus\"></i>";
				this.h();
			},

			h: function hydrate() {
				addListener(button, "click", click_handler_1);
				button.className = "btn-floating btn-large green waves-effect waves-light";
				div.className = "fixed-action-btn";
			},

			m: function mount(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(button, div);
			},

			p: noop,

			u: function unmount() {
				detachNode(div);
			},

			d: function destroy() {
				removeListener(button, "click", click_handler_1);
			}
		};
	}

	function click_handler(event) {
		var component = this._svelte.component;
		var each_value_1 = this._svelte.each_value_1, file_index = this._svelte.file_index, file = each_value_1[file_index];
		component.downloadFile(file.file_id);
	}

	function CommentsModalComponent(options) {
		init(this, options);
		this._state = assign({}, options.data);

		if (!document.getElementById("svelte-1izd5zl-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(CommentsModalComponent.prototype, {
	 	destroy: destroy,
	 	get: get,
	 	fire: fire,
	 	observe: observe,
	 	on: on,
	 	set: set,
	 	teardown: destroy,
	 	_set: _set,
	 	_mount: _mount,
	 	_unmount: _unmount,
	 	_differs: _differs
	 });

	CommentsModalComponent.prototype._recompute = noop;

	function createElement(name) {
		return document.createElement(name);
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function createComment() {
		return document.createComment('');
	}

	function destroyEach(iterations) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d();
		}
	}

	function toNumber(value) {
		return value === '' ? undefined : +value;
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function init(component, options) {
		component._observers = { pre: blankObject(), post: blankObject() };
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = this.get = noop;

		if (detach !== false) this._fragment.u();
		this._fragment.d();
		this._fragment = this._state = null;
	}

	function get(key) {
		return key ? this._state[key] : this._state;
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			handlers[i].call(this, data);
		}
	}

	function observe(key, callback, options) {
		var group = options && options.defer
			? this._observers.post
			: this._observers.pre;

		(group[key] || (group[key] = [])).push(callback);

		if (!options || options.init !== false) {
			callback.__calling = true;
			callback.call(this, this._state[key]);
			callback.__calling = false;
		}

		return {
			cancel: function() {
				var index = group[key].indexOf(callback);
				if (~index) group[key].splice(index, 1);
			}
		};
	}

	function on(eventName, handler) {
		if (eventName === 'teardown') return this.on('destroy', handler);

		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			dispatchObservers(this, this._observers.pre, changed, this._state, oldState);
			this._fragment.p(changed, this._state);
			dispatchObservers(this, this._observers.post, changed, this._state, oldState);
		}
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	function _unmount() {
		if (this._fragment) this._fragment.u();
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function blankObject() {
		return Object.create(null);
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function dispatchObservers(component, group, changed, newState, oldState) {
		for (var key in group) {
			if (!changed[key]) continue;

			var newValue = newState[key];
			var oldValue = oldState[key];

			var callbacks = group[key];
			if (!callbacks) continue;

			for (var i = 0; i < callbacks.length; i += 1) {
				var callback = callbacks[i];
				if (callback.__calling) continue;

				callback.__calling = true;
				callback.call(component, newValue, oldValue);
				callback.__calling = false;
			}
		}
	}
	return CommentsModalComponent;
}());